var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.404,1,2.175]],["body/controllers/AppController.html",[0,2.29,1,3.549,2,2.374,3,0.405,4,0.356,5,0.356,6,3.678,7,0.264,8,1.578,9,5.142,10,1.481,11,0.029,12,0.508,13,4.375,14,1.279,15,0.914,16,0.765,17,0.874,18,3.178,19,3.678,20,0.405,21,0.113,22,2.875,23,4.375,24,1.102,25,4.375,26,0.023,27,0.023]],["title/modules/AppModule.html",[28,2.435,29,2.175]],["body/modules/AppModule.html",[1,3.058,2,2.157,3,0.256,4,0.225,5,0.225,11,0.029,16,0.892,17,0.553,18,3.041,19,2.327,20,0.256,21,0.072,26,0.017,27,0.017,28,2.925,29,4.268,30,2.036,31,2.613,32,2.327,33,2.327,34,2.572,35,2.791,36,2.791,37,2.791,38,2.572,39,2.791,40,3.342,41,2.327,42,2.327,43,2.768,44,3.975,45,3.058,46,3.058,47,2.768,48,2.768,49,1.646,50,2.364,51,2.327,52,1.502,53,2.364,54,2.327,55,1.27,56,2.364,57,2.327,58,1.27,59,2.364,60,2.327,61,2.768,62,2.768,63,0.871,64,1.819,65,1.819,66,2.768,67,1.819,68,2.768,69,2.768,70,2.768,71,2.768,72,2.768,73,2.768,74,2.768,75,2.768,76,2.768,77,1.38,78,2.768,79,1.854,80,2.768,81,2.768,82,2.768]],["title/injectables/AppService.html",[18,1.796,83,0.514]],["body/injectables/AppService.html",[3,0.422,4,0.371,5,0.371,7,0.275,8,1.619,9,5.216,11,0.028,12,0.53,14,1.333,15,0.938,16,0.646,17,0.911,18,3.006,20,0.422,21,0.118,24,1.149,26,0.024,27,0.024,83,0.86,84,1.935,85,3.835,86,4.562,87,4.562,88,4.562]],["title/controllers/AuthController.html",[0,1.404,89,2.435]],["body/controllers/AuthController.html",[0,0.967,2,1.237,3,0.211,4,0.186,5,0.186,7,0.137,8,1.007,10,1.406,11,0.029,12,0.482,14,1.214,16,0.81,17,0.455,20,0.211,21,0.059,24,1.317,26,0.015,27,0.015,34,1.906,37,2.068,38,1.906,39,2.068,51,1.916,55,2.281,57,1.916,58,1.046,64,1.498,65,1.498,67,1.498,77,1.127,89,2.535,90,1.916,91,1.677,92,2.279,93,2.248,94,4.629,95,3.445,96,3.445,97,2.279,98,4.588,99,3.445,100,2.279,101,1.406,102,0.432,103,0.703,104,1.762,105,2.279,106,3.445,107,2.279,108,2.279,109,3.445,110,2.279,111,1.356,112,1.916,113,3.491,114,1.916,115,1.916,116,1.677,117,1.498,118,1.356,119,1.916,120,2.279,121,0.717,122,1.563,123,2.279,124,4.153,125,1.517,126,4.629,127,3.445,128,4.153,129,2.253,130,2.279,131,3.445,132,3.445,133,2.279,134,2.279,135,0.745,136,2.279,137,2.264,138,2.279,139,2.279,140,4.153,141,3.846,142,4.629,143,3.056,144,3.056,145,4.153,146,2.279,147,2.279,148,2.279,149,2.279,150,1.677,151,3.445,152,2.279,153,1.498,154,2.279,155,2.279,156,2.279,157,2.279,158,2.279]],["title/injectables/AuthHelper.html",[34,1.519,83,0.514]],["body/injectables/AuthHelper.html",[3,0.337,4,0.297,5,0.297,7,0.22,8,1.404,11,0.029,12,0.558,14,1.065,15,0.91,16,0.761,17,0.728,20,0.337,21,0.094,22,2.394,24,1.21,26,0.02,27,0.02,34,2.204,67,2.394,77,1.304,83,0.745,84,1.545,101,1.626,102,0.595,103,0.814,111,3.196,112,3.062,113,5.128,121,1.146,125,1.459,143,2.68,159,3.062,160,4.804,161,3.643,162,3.643,163,4.804,164,3.643,165,4.804,166,5.375,167,3.643,168,3.643,169,3.062,170,3.643,171,3.643,172,4.804,173,3.643]],["title/classes/BaseDTO.html",[21,0.086,174,0.773]],["body/classes/BaseDTO.html",[3,0.362,4,0.318,5,0.318,7,0.236,10,1.883,11,0.028,12,0.646,15,1.053,16,0.554,20,0.362,21,0.101,26,0.021,27,0.021,63,1.23,102,0.633,103,0.994,135,1.203,174,1.175,175,1.142,176,3.286,177,1.47,178,2.359,179,2.359,180,1.956,181,3.909,182,3.909,183,1.658,184,1.794,185,2.134,186,3.909,187,3.286,188,4.229,189,3.909,190,3.286,191,3.909,192,3.286,193,2.876]],["title/classes/Category.html",[21,0.086,52,1.796]],["body/classes/Category.html",[3,0.287,4,0.253,5,0.253,7,0.187,10,1.97,11,0.029,12,0.676,15,1.03,16,0.796,17,0.62,20,0.495,21,0.111,26,0.018,27,0.018,35,1.546,52,2.339,53,1.846,63,0.976,77,1.344,79,1.572,83,0.669,102,0.634,103,0.906,121,0.976,122,0.976,125,0.843,135,0.932,174,1.359,175,0.907,177,1.26,178,1.828,179,1.828,180,1.943,183,1.317,184,1.424,185,1.317,194,1.846,195,1.677,196,2.945,197,3.643,198,3.104,199,3.104,200,3.104,201,1.677,202,1.546,203,1.546,204,1.546,205,1.26,206,1.22,207,1.22,208,1.22,209,1.22,210,1.572,211,1.356,212,1.051,213,2.284,214,2.284,215,2.609,216,1.132,217,1.22]],["title/controllers/CategoryController.html",[0,1.404,45,2.175]],["body/controllers/CategoryController.html",[0,0.971,2,1.242,3,0.212,4,0.186,5,0.186,7,0.138,8,1.01,10,1.686,11,0.029,12,0.578,14,1.455,16,0.77,17,0.457,20,0.212,21,0.059,24,1.254,26,0.015,27,0.015,34,1.91,35,2.073,38,1.91,45,2.271,52,1.242,54,1.924,55,1.91,58,1.05,64,1.504,65,1.504,77,1.351,91,1.683,93,2.433,98,4.803,101,1.686,102,0.518,103,0.843,104,2.112,116,1.683,117,1.504,121,0.72,122,1.309,125,1.584,129,2.701,135,0.747,150,3.063,211,1.71,218,1.924,219,1.466,220,2.905,221,2.905,222,2.905,223,2.905,224,1.924,225,3.573,226,2.905,227,2.288,228,1.924,229,2.905,230,2.288,231,1.924,232,2.905,233,2.288,234,1.924,235,2.112,236,1.57,237,2.905,238,2.288,239,1.924,240,2.905,241,2.288,242,3.5,243,2.288,244,1.683,245,2.288,246,1.924,247,4.186,248,2.288,249,1.924,250,1.924,251,1.924,252,2.905,253,2.288,254,3.899,255,1.924,256,3.5,257,2.288,258,1.924,259,2.288,260,1.924,261,1.924,262,2.288]],["title/classes/CategoryDTO.html",[21,0.086,225,2.175]],["body/classes/CategoryDTO.html",[3,0.346,4,0.304,5,0.304,7,0.225,10,1.842,11,0.028,12,0.713,15,1.075,16,0.529,20,0.346,21,0.097,26,0.021,27,0.021,77,1.477,102,0.652,103,0.977,135,1.056,174,1.435,175,1.092,177,1.427,178,2.072,179,2.072,180,1.536,183,1.584,184,1.714,185,1.584,195,1.653,196,3.236,197,4.003,201,1.842,202,1.86,203,1.86,204,1.86,225,3.21,263,3.14,264,3.735,265,3.735,266,3.735,267,3.14]],["title/injectables/CategoryService.html",[35,1.648,83,0.514]],["body/injectables/CategoryService.html",[3,0.225,4,0.198,5,0.198,7,0.146,8,1.056,11,0.029,12,0.688,14,1.701,15,0.986,16,0.723,17,0.486,20,0.442,21,0.093,26,0.015,27,0.015,35,1.8,52,1.319,53,1.445,63,0.764,77,1.58,79,1.318,83,0.561,84,1.031,93,2.239,101,1.929,102,0.593,103,0.965,104,2.027,121,1.137,122,0.764,125,0.66,135,0.933,174,0.844,180,1.503,194,1.445,195,1.461,196,1.445,197,1.788,201,1.971,205,1.779,206,0.955,207,0.955,208,0.955,209,0.955,210,1.318,211,1.744,212,0.823,213,1.788,214,1.788,215,2.043,216,1.318,217,0.955,219,1.533,235,1.031,236,1.224,268,1.961,269,1.8,270,1.961,271,1.961,272,1.8,273,2.342,274,2.342,275,1.961,276,1.445,277,2.43,278,1.319,279,3.091,280,2.666,281,1.445,282,1.319,283,1.445,284,1.319,285,1.445,286,1.961,287,1.319,288,1.445,289,1.319,290,1.445,291,1.319,292,1.445,293,1.445,294,1.21,295,1.445,296,1.319,297,1.445]],["title/classes/ControllerBase.html",[21,0.086,298,2.435]],["body/classes/ControllerBase.html",[3,0.396,4,0.348,5,0.348,7,0.258,8,1.557,11,0.029,12,0.619,14,1.251,16,0.754,20,0.396,21,0.111,22,2.813,26,0.023,27,0.023,77,1.162,101,1.449,102,0.446,103,0.725,121,1.346,174,1,175,1.251,205,1.824,219,2.574,294,2.131,298,3.918,299,3.597,300,4.279,301,4.279,302,5.326,303,4.279,304,3.597,305,4.279]],["title/interfaces/IDataFilter.html",[306,2.175,307,2.435]],["body/interfaces/IDataFilter.html",[3,0.366,4,0.322,5,0.322,7,0.238,11,0.029,15,0.998,20,0.366,26,0.021,27,0.021,102,0.675,177,1.48,183,2.5,193,4.664,306,2.595,307,3.724,308,3.949,309,3.319,310,5.894,311,5.894,312,4.955,313,4.955,314,5.894,315,5.063,316,3.949,317,3.319,318,3.949]],["title/classes/Media.html",[21,0.086,319,2.175]],["body/classes/Media.html",[3,0.281,4,0.247,5,0.247,7,0.183,10,1.955,11,0.029,12,0.671,15,1.041,16,0.789,17,0.606,20,0.49,21,0.11,24,0.764,26,0.018,27,0.018,63,0.954,79,1.546,83,0.658,102,0.655,103,0.897,122,0.954,125,0.823,135,0.917,174,1.349,175,0.886,177,1.239,178,1.799,179,1.799,180,1.933,183,1.286,184,1.391,185,1.286,195,1.656,201,1.656,202,1.51,203,1.51,204,1.51,205,1.239,206,1.191,207,1.191,208,1.191,209,1.191,210,1.546,211,1.334,212,1.026,216,1.105,217,1.191,272,1.51,319,2.787,320,1.803,321,4.686,322,4.111,323,3.032,324,3.032,325,3.032,326,2.231,327,1.993,328,2.231,329,1.993,330,2.549,331,2.549,332,1.993,333,1.286]],["title/injectables/MediaService.html",[83,0.514,329,2.175]],["body/injectables/MediaService.html",[3,0.214,4,0.189,5,0.189,7,0.14,8,1.019,11,0.029,12,0.691,14,1.711,15,1.02,16,0.709,17,0.463,20,0.432,21,0.09,24,0.583,26,0.015,27,0.015,63,0.728,77,1.56,79,1.271,83,0.541,84,0.982,93,2.207,101,1.945,102,0.61,103,0.973,104,1.979,121,0.728,122,0.728,125,0.628,135,0.907,174,0.814,180,1.468,195,1.419,201,1.945,205,1.761,206,0.91,207,0.91,208,0.91,209,0.91,210,1.271,211,1.716,212,0.784,216,1.271,217,0.91,219,1.479,235,0.982,236,1.18,268,1.891,269,1.736,270,1.891,271,1.891,272,2.088,273,2.275,274,2.275,275,1.891,276,1.377,278,1.256,279,3.047,280,2.618,281,1.377,282,1.256,283,1.377,284,1.256,285,1.377,286,1.891,287,1.256,288,1.377,289,1.256,290,1.377,291,1.256,292,1.377,293,1.377,294,1.153,295,1.377,296,1.256,297,1.377,319,1.522,320,1.377,321,3.922,322,1.946,326,1.703,327,1.522,328,1.703,329,2.291,330,1.946,331,2.931,332,1.522,333,0.982,334,3.486,335,2.315,336,2.315]],["title/classes/Post.html",[21,0.086,58,1.519]],["body/classes/Post.html",[3,0.258,4,0.227,5,0.227,7,0.168,10,1.959,11,0.029,12,0.672,15,1.048,16,0.796,17,0.557,20,0.472,21,0.103,24,0.702,26,0.017,27,0.017,36,1.388,58,1.833,59,1.658,63,0.877,79,1.457,83,0.62,93,1.095,102,0.628,103,0.864,122,0.877,125,0.757,129,2.168,135,1.103,174,1.313,175,0.815,177,1.168,178,1.695,179,1.695,180,1.947,183,1.182,184,1.279,185,1.182,195,1.581,201,1.581,202,1.388,203,1.388,204,1.388,205,1.168,206,1.095,207,1.095,208,1.095,209,1.095,210,1.457,211,1.257,212,0.944,216,1.016,217,1.095,235,1.182,236,1.353,244,2.051,269,1.388,332,1.832,333,1.182,337,1.658,338,3.436,339,3.549,340,3.436,341,3.436,342,2.788,343,2.788,344,2.788,345,2.788,346,2.051,347,2.051,348,2.343,349,2.343,350,1.658,351,2.051,352,2.343,353,2.051,354,2.051,355,2.343,356,2.343]],["title/controllers/PostController.html",[0,1.404,46,2.175]],["body/controllers/PostController.html",[0,0.885,2,1.131,3,0.193,4,0.17,5,0.17,7,0.126,8,0.941,10,1.709,11,0.029,12,0.586,14,1.475,16,0.745,17,0.417,20,0.193,21,0.054,24,1.272,26,0.014,27,0.014,34,1.804,36,1.957,38,1.804,46,2.116,55,1.804,58,1.477,60,1.753,64,1.371,65,1.371,77,1.37,91,1.534,93,2.447,98,4.818,101,1.709,102,0.526,103,0.855,104,2.141,114,1.753,116,1.534,117,1.371,121,0.656,122,1.236,125,1.597,129,2.739,135,0.696,150,2.892,211,1.655,219,1.365,220,2.706,221,2.706,222,2.706,223,2.706,224,1.753,226,2.706,228,1.753,229,2.706,231,1.753,232,2.706,234,1.753,235,2.416,236,1.781,237,2.706,239,1.753,240,2.706,242,3.305,246,1.753,247,4.244,249,2.706,250,2.706,251,1.753,252,2.706,254,3.716,255,1.753,256,3.305,258,1.753,261,1.753,339,1.371,357,1.753,358,3.219,359,3.458,360,2.085,361,2.085,362,2.085,363,2.085,364,2.085,365,3.219,366,2.085,367,2.085,368,2.085,369,2.085,370,1.753,371,2.085,372,2.085,373,2.085,374,2.085,375,2.085,376,2.085,377,2.085,378,2.085,379,2.085]],["title/classes/PostDTO.html",[21,0.086,359,2.175]],["body/classes/PostDTO.html",[3,0.336,4,0.296,5,0.296,7,0.219,10,1.817,11,0.028,12,0.722,15,1.091,16,0.514,20,0.336,21,0.094,26,0.02,27,0.02,102,0.657,103,0.967,135,1.037,174,1.424,175,1.061,177,1.401,178,2.034,179,2.034,180,1.508,183,1.54,184,1.666,185,1.54,195,1.623,201,1.817,202,1.808,203,1.808,204,1.808,267,3.053,338,3.948,339,3.528,340,3.948,341,3.948,359,3.151,380,3.053,381,3.632,382,3.632,383,3.632,384,3.632]],["title/injectables/PostService.html",[36,1.648,83,0.514]],["body/injectables/PostService.html",[3,0.202,4,0.178,5,0.178,7,0.132,8,0.974,11,0.029,12,0.681,14,1.685,15,1.019,16,0.728,17,0.436,20,0.419,21,0.086,24,0.55,26,0.014,27,0.014,36,1.66,58,1.001,59,1.298,63,0.686,77,1.534,79,1.215,83,0.517,84,0.926,93,2.304,101,1.913,102,0.588,103,0.957,104,2.068,121,0.686,122,0.686,125,0.592,129,1.808,135,1.112,174,0.779,180,1.534,195,1.369,201,1.913,205,1.738,206,0.857,207,0.857,208,0.857,209,0.857,210,1.215,211,1.682,212,0.739,216,1.215,217,0.857,219,1.414,235,1.92,236,1.74,244,1.605,268,1.808,269,2.013,270,1.808,271,1.808,272,1.66,273,2.194,274,2.194,275,1.808,276,1.298,278,1.184,279,2.992,280,2.559,281,1.298,282,1.184,283,1.298,284,1.184,285,1.298,286,1.808,287,1.184,288,1.298,289,1.184,290,1.298,291,1.184,292,1.298,293,1.298,294,1.087,295,1.298,296,1.184,297,1.298,332,1.434,333,0.926,337,1.298,338,1.605,339,2.658,340,1.605,341,1.605,346,1.605,347,1.605,348,1.834,349,2.802,350,1.298,351,1.605,352,1.834,353,1.605,354,1.605,355,1.834,356,1.834,385,3.333,386,2.182,387,2.182]],["title/classes/Profile.html",[21,0.086,49,1.968]],["body/classes/Profile.html",[3,0.263,4,0.231,5,0.231,7,0.171,10,2.014,11,0.029,12,0.691,15,1.072,16,0.77,17,0.568,20,0.476,21,0.105,24,0.716,26,0.017,27,0.017,37,1.415,49,2.409,50,1.69,63,0.894,79,1.477,83,0.629,102,0.64,103,0.871,121,0.894,122,0.894,125,0.771,135,1.113,174,1.321,175,0.83,177,1.184,178,1.718,179,1.718,180,1.991,183,1.205,184,1.304,185,1.205,195,1.598,201,1.598,202,1.415,203,1.415,204,1.415,205,1.184,206,1.117,207,1.117,208,1.117,209,1.117,210,1.477,211,1.274,212,0.962,216,1.036,217,1.117,280,2.35,333,1.205,388,1.69,389,3.968,390,3.968,391,3.968,392,3.968,393,2.842,394,2.842,395,2.842,396,2.842,397,2.842,398,2.09,399,2.09,400,2.389,401,2.389,402,1.868]],["title/injectables/ProfileService.html",[37,1.648,83,0.514]],["body/injectables/ProfileService.html",[3,0.212,4,0.186,5,0.186,7,0.138,8,1.01,11,0.029,12,0.689,14,1.706,15,1.04,16,0.705,17,0.457,20,0.429,21,0.089,24,0.577,26,0.015,27,0.015,37,1.72,49,1.361,50,1.361,63,0.72,77,1.555,79,1.26,83,0.536,84,0.971,93,2.199,101,1.939,102,0.596,103,0.97,104,1.967,121,1.087,122,0.72,125,0.621,135,1.132,174,0.807,180,1.647,195,1.409,201,1.939,205,1.756,206,0.899,207,0.899,208,0.899,209,0.899,210,1.26,211,1.71,212,0.775,216,1.26,217,0.899,219,1.466,235,0.971,236,1.17,268,1.875,269,1.72,270,1.875,271,1.875,272,1.72,273,2.259,274,2.259,275,1.875,276,1.361,278,1.242,279,3.036,280,2.706,281,1.361,282,1.242,283,1.361,284,1.242,285,1.361,286,1.875,287,1.242,288,1.361,289,1.242,290,1.361,291,1.242,292,1.361,293,1.361,294,1.139,295,1.361,296,1.242,297,1.361,333,0.971,388,1.361,389,1.924,390,1.924,391,1.924,392,1.924,398,1.683,399,1.683,400,1.924,401,2.905,402,1.504,403,3.455,404,2.288,405,2.288]],["title/classes/QueryDTO.html",[21,0.086,236,1.12]],["body/classes/QueryDTO.html",[3,0.413,4,0.363,5,0.363,7,0.269,11,0.028,12,0.686,15,1.089,20,0.413,21,0.115,26,0.023,27,0.023,102,0.615,175,1.303,177,1.596,236,1.849,312,4.965,313,4.965,406,3.747,407,5.906,408,4.458,409,4.458,410,4.458]],["title/classes/ResponseDTO.html",[21,0.086,118,1.968]],["body/classes/ResponseDTO.html",[3,0.359,4,0.316,5,0.316,7,0.234,11,0.028,12,0.721,15,0.848,20,0.359,21,0.1,26,0.021,27,0.021,102,0.646,103,1.118,118,2.978,141,4.079,175,1.135,177,1.464,178,2.352,193,4.567,350,3.297,411,3.265,412,4.661,413,4.661,414,4.661,415,3.883,416,3.883,417,3.883,418,3.883,419,3.883,420,3.883]],["title/injectables/ResponseHelper.html",[38,1.519,83,0.514]],["body/injectables/ResponseHelper.html",[3,0.368,4,0.324,5,0.324,7,0.24,8,1.486,11,0.029,12,0.462,14,1.162,16,0.72,17,0.794,20,0.368,21,0.103,24,1.002,26,0.022,27,0.022,38,2.333,77,1.079,83,0.789,84,1.686,101,1.346,103,0.673,115,3.342,118,3.024,119,3.342,141,4.493,153,2.613,350,3.334,370,4.274,412,5.251,413,3.342,414,5.134,421,3.342,422,5.085,423,3.975,424,5.909,425,3.975,426,3.975]],["title/classes/ServiceBase.html",[21,0.086,205,0.967]],["body/classes/ServiceBase.html",[3,0.172,4,0.151,5,0.151,7,0.112,8,0.858,11,0.029,12,0.64,14,1.572,15,0.911,16,0.516,20,0.172,21,0.048,22,1.219,24,1.416,26,0.012,27,0.012,77,1.418,93,2.247,101,1.768,102,0.524,103,0.885,104,1.759,121,0.583,125,1.305,129,2.989,135,1.271,143,2.161,144,1.365,153,2.726,169,1.559,174,0.433,175,0.542,187,1.559,188,3.065,190,1.559,192,1.559,205,0.858,211,1.768,212,0.628,216,1.648,219,1.246,235,0.787,236,1.404,260,3.065,268,1.594,269,1.816,270,1.594,271,1.594,272,2.25,273,2.25,274,2.25,275,1.594,278,1.594,279,3.102,280,2.847,282,1.594,284,1.594,286,1.594,287,1.594,289,1.594,291,1.594,294,0.924,296,1.594,304,1.559,333,1.917,350,1.103,351,1.365,353,1.365,354,1.365,427,1.559,428,1.855,429,1.855,430,1.855,431,1.855,432,1.855,433,1.855,434,1.855,435,1.855,436,1.855,437,1.855,438,1.855,439,1.855,440,1.855,441,1.855,442,1.855,443,1.855,444,1.855,445,1.855,446,1.559,447,2.937,448,3.647,449,1.855,450,1.855,451,1.855,452,1.855,453,1.855,454,1.855,455,1.855,456,1.855,457,4.147,458,1.855,459,1.855,460,1.855,461,1.855,462,1.855,463,2.937,464,1.559,465,1.855,466,1.855,467,1.855,468,2.937,469,2.937,470,1.855,471,1.855,472,1.855,473,2.937,474,1.855,475,1.855,476,1.855,477,1.855,478,1.855]],["title/classes/TokenDTO.html",[21,0.086,111,1.968]],["body/classes/TokenDTO.html",[3,0.427,4,0.376,5,0.376,7,0.278,11,0.028,12,0.648,15,1.055,20,0.427,21,0.119,26,0.024,27,0.024,102,0.581,111,3.318,135,1.297,137,3.941,175,1.349,177,1.63,479,3.88,480,4.615,481,4.615]],["title/classes/User.html",[21,0.086,55,1.519]],["body/classes/User.html",[3,0.277,4,0.244,5,0.244,7,0.18,10,1.947,11,0.029,12,0.668,15,0.974,16,0.786,17,0.598,20,0.488,21,0.109,24,1.059,26,0.018,27,0.018,39,1.49,55,1.929,56,1.78,63,0.942,79,1.532,83,0.652,102,0.628,103,0.892,122,0.942,125,0.813,135,0.909,137,3.646,174,1.344,175,0.875,177,1.228,178,1.783,179,1.783,180,1.928,183,1.27,184,1.374,185,1.27,195,1.644,201,1.644,202,1.49,203,1.49,204,1.49,205,1.228,206,1.176,207,1.176,208,1.176,209,1.176,210,1.532,211,1.322,212,1.013,216,1.091,217,1.176,333,1.27,402,1.968,482,1.78,483,4.083,484,4.836,485,3.533,486,2.993,487,2.993,488,2.993,489,2.202,490,2.202,491,2.516,492,2.516,493,2.516,494,2.516]],["title/injectables/UserService.html",[39,1.648,83,0.514]],["body/injectables/UserService.html",[3,0.21,4,0.185,5,0.185,7,0.137,8,1.002,11,0.029,12,0.696,14,1.729,15,0.945,16,0.702,17,0.453,20,0.427,21,0.089,24,0.864,26,0.015,27,0.015,39,1.708,55,1.04,56,1.348,63,0.713,77,1.55,79,1.251,83,0.532,84,0.961,93,2.192,101,1.934,102,0.581,103,0.967,104,1.958,121,0.713,122,0.713,125,0.615,135,0.895,137,3.034,174,0.801,180,1.452,195,1.401,201,1.934,205,1.753,206,0.891,207,0.891,208,0.891,209,0.891,210,1.251,211,1.704,212,0.767,216,1.251,217,0.891,219,1.455,235,0.961,236,1.161,268,1.861,269,1.708,270,1.861,271,1.861,272,1.708,273,2.245,274,2.245,275,1.861,276,1.348,278,1.23,279,3.027,280,2.597,281,1.348,282,1.23,283,1.348,284,1.23,285,1.348,286,1.861,287,1.23,288,1.348,289,1.23,290,1.348,291,1.23,292,1.348,293,1.348,294,1.128,295,1.348,296,1.23,297,1.348,333,0.961,402,1.49,482,1.348,483,1.905,484,4.385,485,1.905,489,1.667,490,1.667,491,1.905,492,2.884,493,3.88,494,1.905,495,3.43,496,2.266,497,2.266,498,2.266]],["title/coverage.html",[499,3.314]],["body/coverage.html",[0,2.143,1,1.794,5,0.222,6,2.294,11,0.029,18,1.481,21,0.163,26,0.017,27,0.017,34,1.252,35,1.359,36,1.359,37,1.359,38,1.252,39,1.359,45,1.794,46,1.794,49,1.623,50,1.623,52,1.481,53,1.623,55,1.252,56,1.623,58,1.252,59,1.623,83,0.913,85,2.294,89,2.008,90,2.294,102,0.284,111,1.623,118,1.623,144,4.95,153,1.794,159,2.294,174,0.638,176,2.294,194,2.745,205,0.798,218,2.294,225,1.794,236,0.924,263,2.294,298,2.008,299,2.294,306,1.794,307,2.008,309,2.294,319,1.794,320,2.745,327,1.794,329,1.794,337,2.745,357,2.294,359,1.794,380,2.294,388,2.745,406,2.294,411,2.294,421,2.294,427,2.294,446,2.294,479,2.294,482,2.745,499,2.008,500,2.729,501,2.729,502,2.729,503,4.615,504,4.615,505,3.936,506,2.294,507,2.294,508,5.579,509,2.294,510,5.751,511,5.579,512,3.936,513,4.615,514,3.936,515,2.294,516,2.294,517,4.615,518,2.729,519,2.729,520,2.729,521,2.729]],["title/dependencies.html",[31,2.614,522,2.328]],["body/dependencies.html",[11,0.029,17,0.915,26,0.024,27,0.024,31,3.01,63,1.44,67,3.01,117,3.01,179,1.942,212,1.55,523,5.976,524,4.579,525,4.579,526,4.579,527,4.579,528,4.579,529,4.579,530,4.579,531,4.579,532,4.579,533,4.579,534,4.579,535,4.579,536,4.579,537,4.579]],["title/miscellaneous/functions.html",[538,1.503,539,3.343]],["body/miscellaneous/functions.html",[7,0.307,11,0.025,26,0.025,27,0.025,515,4.283,516,5.256,538,2.765,539,4.283,540,5.095]],["title/index.html",[7,0.167,541,2.77,542,2.77]],["body/index.html",[4,0.304,11,0.028,26,0.021,27,0.021,196,2.221,499,2.748,543,3.735,544,3.735,545,4.884,546,3.735,547,3.735,548,3.735,549,3.735,550,3.735,551,3.735,552,5.442,553,3.735,554,3.735,555,3.735,556,3.735,557,6.258,558,3.735,559,3.735,560,3.735,561,6.143,562,3.735,563,3.735,564,4.884,565,3.735,566,3.735,567,3.735,568,3.735,569,4.884,570,4.884,571,3.735,572,3.735,573,3.735,574,4.884,575,4.884,576,3.735,577,3.735,578,3.735,579,3.735,580,3.735,581,3.14,582,3.735,583,3.735,584,3.735,585,3.735,586,3.735,587,3.735,588,3.735,589,3.735,590,3.735,591,3.735,592,3.14,593,3.735,594,3.735,595,3.735,596,3.735,597,3.735,598,3.735,599,3.14]],["title/modules.html",[30,3.314]],["body/modules.html",[11,0.025,26,0.025,27,0.025,29,3.378,30,3.781,581,4.321,600,5.14,601,5.14,602,5.14]],["title/overview.html",[603,3.787]],["body/overview.html",[2,2.232,11,0.028,18,3.091,26,0.022,27,0.022,28,3.027,29,4.437,31,3.416,32,3.459,33,3.459,34,2.614,35,2.836,36,2.836,37,2.836,38,2.614,39,2.836,40,4.369,41,3.459,42,3.459,84,1.745,175,1.202,306,2.704,464,4.369,603,3.459,604,4.115,605,4.115,606,4.115]],["title/properties.html",[177,1.162,522,2.328]],["body/properties.html",[11,0.028,26,0.025,27,0.025,177,1.47,196,2.991,592,4.228,599,4.228,607,5.03,608,5.03,609,5.03]],["title/miscellaneous/typealiases.html",[538,1.503,610,3.977]],["body/miscellaneous/typealiases.html",[7,0.281,11,0.024,26,0.024,27,0.024,102,0.486,194,2.777,210,2.333,213,4.134,320,2.777,326,4.134,337,2.777,346,4.134,388,2.777,398,4.134,482,2.777,489,4.134,538,2.534,611,4.67,612,3.926,613,3.926,614,3.926,615,3.926,616,3.926]],["title/miscellaneous/variables.html",[538,1.503,617,3.343]],["body/miscellaneous/variables.html",[7,0.25,11,0.028,26,0.022,27,0.022,50,3.104,53,3.104,56,3.104,59,3.104,102,0.431,185,1.758,194,2.464,214,3.048,317,5.307,320,2.464,327,3.431,328,3.048,337,2.464,347,3.048,388,2.464,399,3.048,482,2.464,490,3.048,506,3.483,507,4.388,509,4.388,538,2.248,612,3.483,613,3.483,614,3.483,615,3.483,616,3.483,617,3.483,618,4.144,619,6.313,620,4.144,621,4.144,622,4.144,623,4.144]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"classes/BaseDTO.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryDTO.html":{},"injectables/CategoryService.html":{},"classes/ControllerBase.html":{},"interfaces/IDataFilter.html":{},"classes/Media.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"controllers/PostController.html":{},"classes/PostDTO.html":{},"injectables/PostService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/QueryDTO.html":{},"classes/ResponseDTO.html":{},"injectables/ResponseHelper.html":{},"classes/ServiceBase.html":{},"classes/TokenDTO.html":{},"classes/User.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"classes/ServiceBase.html":{},"coverage.html":{}}}],["0.0.1",{"_index":608,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":533,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":510,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":505,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":517,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":519,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":503,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":504,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":513,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":514,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":511,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":512,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":518,"title":{},"body":{"coverage.html":{}}}],["0x3",{"_index":453,"title":{},"body":{"classes/ServiceBase.html":{}}}],["0x8",{"_index":454,"title":{},"body":{"classes/ServiceBase.html":{}}}],["1",{"_index":464,"title":{},"body":{"classes/ServiceBase.html":{},"overview.html":{}}}],["10.0.1",{"_index":525,"title":{},"body":{"dependencies.html":{}}}],["12h",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["13",{"_index":606,"title":{},"body":{"overview.html":{}}}],["16",{"_index":450,"title":{},"body":{"classes/ServiceBase.html":{}}}],["2",{"_index":169,"title":{},"body":{"injectables/AuthHelper.html":{},"classes/ServiceBase.html":{}}}],["200",{"_index":623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.0.2",{"_index":535,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":604,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":531,"title":{},"body":{"dependencies.html":{}}}],["404",{"_index":621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4xxx",{"_index":442,"title":{},"body":{"classes/ServiceBase.html":{}}}],["6.8.3",{"_index":528,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":537,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":605,"title":{},"body":{"overview.html":{}}}],["9.0.0",{"_index":523,"title":{},"body":{"dependencies.html":{}}}],["9.2.1",{"_index":526,"title":{},"body":{"dependencies.html":{}}}],["_model",{"_index":216,"title":{},"body":{"classes/Category.html":{},"injectables/CategoryService.html":{},"classes/Media.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"injectables/PostService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/ServiceBase.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["_model.id",{"_index":471,"title":{},"body":{"classes/ServiceBase.html":{}}}],["_model.metadata",{"_index":470,"title":{},"body":{"classes/ServiceBase.html":{}}}],["_model.metadata.active",{"_index":476,"title":{},"body":{"classes/ServiceBase.html":{}}}],["_model.metadata.modifiedby",{"_index":468,"title":{},"body":{"classes/ServiceBase.html":{}}}],["_model.metadata.modifiedtime",{"_index":469,"title":{},"body":{"classes/ServiceBase.html":{}}}],["_user",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["_user.email",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{}}}],["_user.id",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["access_token",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{}}}],["activate",{"_index":483,"title":{},"body":{"classes/User.html":{},"injectables/UserService.html":{}}}],["active",{"_index":192,"title":{},"body":{"classes/BaseDTO.html":{},"classes/ServiceBase.html":{}}}],["aliases",{"_index":611,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["amazing",{"_index":582,"title":{},"body":{"index.html":{}}}],["app",{"_index":559,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":551,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["async",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/ProfileService.html":{},"classes/ServiceBase.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["authcontroller",{"_index":89,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["authhelper",{"_index":34,"title":{"injectables/AuthHelper.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"controllers/CategoryController.html":{},"controllers/PostController.html":{},"coverage.html":{},"overview.html":{}}}],["author",{"_index":592,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authorid",{"_index":338,"title":{},"body":{"classes/Post.html":{},"classes/PostDTO.html":{},"injectables/PostService.html":{}}}],["authorization",{"_index":165,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["authorization.split",{"_index":167,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["authorizationarr",{"_index":166,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["authorizationarr.length",{"_index":168,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["await",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"classes/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/ServiceBase.html":{}}}],["backers",{"_index":583,"title":{},"body":{"index.html":{}}}],["bad_request",{"_index":620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["basedto",{"_index":174,"title":{"classes/BaseDTO.html":{}},"body":{"classes/BaseDTO.html":{},"classes/Category.html":{},"classes/CategoryDTO.html":{},"injectables/CategoryService.html":{},"classes/ControllerBase.html":{},"classes/Media.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"classes/PostDTO.html":{},"injectables/PostService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/ServiceBase.html":{},"classes/User.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["basedto:5",{"_index":203,"title":{},"body":{"classes/Category.html":{},"classes/CategoryDTO.html":{},"classes/Media.html":{},"classes/Post.html":{},"classes/PostDTO.html":{},"classes/Profile.html":{},"classes/User.html":{}}}],["basedto:7",{"_index":202,"title":{},"body":{"classes/Category.html":{},"classes/CategoryDTO.html":{},"classes/Media.html":{},"classes/Post.html":{},"classes/PostDTO.html":{},"classes/Profile.html":{},"classes/User.html":{}}}],["basedto:9",{"_index":204,"title":{},"body":{"classes/Category.html":{},"classes/CategoryDTO.html":{},"classes/Media.html":{},"classes/Post.html":{},"classes/PostDTO.html":{},"classes/Profile.html":{},"classes/User.html":{}}}],["bearer",{"_index":171,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["bio",{"_index":389,"title":{},"body":{"classes/Profile.html":{},"injectables/ProfileService.html":{}}}],["birhdate",{"_index":390,"title":{},"body":{"classes/Profile.html":{},"injectables/ProfileService.html":{}}}],["body",{"_index":242,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/PostController.html":{}}}],["boolean",{"_index":485,"title":{},"body":{"classes/User.html":{},"injectables/UserService.html":{}}}],["bootstrap",{"_index":516,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":602,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":600,"title":{},"body":{"modules.html":{}}}],["building",{"_index":546,"title":{},"body":{"index.html":{}}}],["c",{"_index":447,"title":{},"body":{"classes/ServiceBase.html":{}}}],["catch",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["category",{"_index":52,"title":{"classes/Category.html":{}},"body":{"modules/AppModule.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"coverage.html":{}}}],["category.name",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["categorycontroller",{"_index":45,"title":{"controllers/CategoryController.html":{}},"body":{"modules/AppModule.html":{},"controllers/CategoryController.html":{},"coverage.html":{}}}],["categorydocument",{"_index":213,"title":{},"body":{"classes/Category.html":{},"injectables/CategoryService.html":{},"miscellaneous/typealiases.html":{}}}],["categorydto",{"_index":225,"title":{"classes/CategoryDTO.html":{}},"body":{"controllers/CategoryController.html":{},"classes/CategoryDTO.html":{},"coverage.html":{}}}],["categoryid",{"_index":339,"title":{},"body":{"classes/Post.html":{},"controllers/PostController.html":{},"classes/PostDTO.html":{},"injectables/PostService.html":{}}}],["categoryschema",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"classes/Category.html":{},"injectables/CategoryService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["categoryservice",{"_index":35,"title":{"injectables/CategoryService.html":{}},"body":{"modules/AppModule.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"coverage.html":{},"overview.html":{}}}],["class",{"_index":21,"title":{"classes/BaseDTO.html":{},"classes/Category.html":{},"classes/CategoryDTO.html":{},"classes/ControllerBase.html":{},"classes/Media.html":{},"classes/Post.html":{},"classes/PostDTO.html":{},"classes/Profile.html":{},"classes/QueryDTO.html":{},"classes/ResponseDTO.html":{},"classes/ServiceBase.html":{},"classes/TokenDTO.html":{},"classes/User.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"classes/BaseDTO.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryDTO.html":{},"injectables/CategoryService.html":{},"classes/ControllerBase.html":{},"classes/Media.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"controllers/PostController.html":{},"classes/PostDTO.html":{},"injectables/PostService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/QueryDTO.html":{},"classes/ResponseDTO.html":{},"injectables/ResponseHelper.html":{},"classes/ServiceBase.html":{},"classes/TokenDTO.html":{},"classes/User.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["classes",{"_index":175,"title":{},"body":{"classes/BaseDTO.html":{},"classes/Category.html":{},"classes/CategoryDTO.html":{},"classes/ControllerBase.html":{},"classes/Media.html":{},"classes/Post.html":{},"classes/PostDTO.html":{},"classes/Profile.html":{},"classes/QueryDTO.html":{},"classes/ResponseDTO.html":{},"classes/ServiceBase.html":{},"classes/TokenDTO.html":{},"classes/User.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["code",{"_index":178,"title":{},"body":{"classes/BaseDTO.html":{},"classes/Category.html":{},"classes/CategoryDTO.html":{},"classes/Media.html":{},"classes/Post.html":{},"classes/PostDTO.html":{},"classes/Profile.html":{},"classes/ResponseDTO.html":{},"classes/User.html":{}}}],["common/abstracts/servicebase",{"_index":206,"title":{},"body":{"classes/Category.html":{},"injectables/CategoryService.html":{},"classes/Media.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"injectables/PostService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["common/basedto",{"_index":267,"title":{},"body":{"classes/CategoryDTO.html":{},"classes/PostDTO.html":{}}}],["common/dtos/cms/categorydto",{"_index":243,"title":{},"body":{"controllers/CategoryController.html":{}}}],["common/dtos/cms/postdto",{"_index":368,"title":{},"body":{"controllers/PostController.html":{}}}],["common/dtos/common/basedto",{"_index":207,"title":{},"body":{"classes/Category.html":{},"injectables/CategoryService.html":{},"classes/Media.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"injectables/PostService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["common/dtos/common/querydto",{"_index":244,"title":{},"body":{"controllers/CategoryController.html":{},"classes/Post.html":{},"injectables/PostService.html":{}}}],["common/dtos/common/responsedto",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ResponseHelper.html":{}}}],["common/dtos/common/tokendto",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthHelper.html":{}}}],["condition",{"_index":310,"title":{},"body":{"interfaces/IDataFilter.html":{}}}],["const",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/Media.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/ServiceBase.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/ControllerBase.html":{},"injectables/MediaService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/ServiceBase.html":{},"injectables/UserService.html":{}}}],["constructor(@injectmodel(media.name",{"_index":330,"title":{},"body":{"classes/Media.html":{},"injectables/MediaService.html":{}}}],["constructor(@injectmodel(post.name",{"_index":348,"title":{},"body":{"classes/Post.html":{},"injectables/PostService.html":{}}}],["constructor(@injectmodel(user.name",{"_index":491,"title":{},"body":{"classes/User.html":{},"injectables/UserService.html":{}}}],["constructor(_model",{"_index":276,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/MediaService.html":{},"injectables/PostService.html":{},"injectables/ProfileService.html":{},"injectables/UserService.html":{}}}],["constructor(jwtservice",{"_index":161,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["constructor(model",{"_index":428,"title":{},"body":{"classes/ServiceBase.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthHelper.html":{},"classes/ControllerBase.html":{},"classes/ServiceBase.html":{}}}],["constructor(service",{"_index":300,"title":{},"body":{"classes/ControllerBase.html":{}}}],["content",{"_index":340,"title":{},"body":{"classes/Post.html":{},"classes/PostDTO.html":{},"injectables/PostService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/PostController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/PostController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('category",{"_index":245,"title":{},"body":{"controllers/CategoryController.html":{}}}],["controller('post",{"_index":371,"title":{},"body":{"controllers/PostController.html":{}}}],["controllerbase",{"_index":298,"title":{"classes/ControllerBase.html":{}},"body":{"classes/ControllerBase.html":{},"coverage.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/PostController.html":{},"overview.html":{}}}],["controllers/category.controller",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["controllers/post.controller",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["count",{"_index":354,"title":{},"body":{"classes/Post.html":{},"injectables/PostService.html":{},"classes/ServiceBase.html":{}}}],["count().exec",{"_index":356,"title":{},"body":{"classes/Post.html":{},"injectables/PostService.html":{}}}],["coverage",{"_index":499,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":219,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/ControllerBase.html":{},"injectables/MediaService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/ProfileService.html":{},"classes/ServiceBase.html":{},"injectables/UserService.html":{}}}],["create(@req",{"_index":255,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/PostController.html":{}}}],["create(model",{"_index":278,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/MediaService.html":{},"injectables/PostService.html":{},"injectables/ProfileService.html":{},"classes/ServiceBase.html":{},"injectables/UserService.html":{}}}],["create(request",{"_index":224,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/PostController.html":{}}}],["createdby",{"_index":190,"title":{},"body":{"classes/BaseDTO.html":{},"classes/ServiceBase.html":{}}}],["createdmodel",{"_index":465,"title":{},"body":{"classes/ServiceBase.html":{}}}],["createdmodel.save()).id",{"_index":467,"title":{},"body":{"classes/ServiceBase.html":{}}}],["createdtime",{"_index":187,"title":{},"body":{"classes/BaseDTO.html":{},"classes/ServiceBase.html":{}}}],["currentuser",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["currentuser(@req",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["currentuser(request",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["data",{"_index":350,"title":{},"body":{"classes/Post.html":{},"injectables/PostService.html":{},"classes/ResponseDTO.html":{},"injectables/ResponseHelper.html":{},"classes/ServiceBase.html":{}}}],["date",{"_index":188,"title":{},"body":{"classes/BaseDTO.html":{},"classes/ServiceBase.html":{}}}],["date().gettime",{"_index":426,"title":{},"body":{"injectables/ResponseHelper.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/BaseDTO.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryDTO.html":{},"classes/Media.html":{},"classes/Post.html":{},"controllers/PostController.html":{},"classes/PostDTO.html":{},"classes/Profile.html":{},"classes/User.html":{}}}],["decriptedtoken",{"_index":172,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["default",{"_index":619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"classes/BaseDTO.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryDTO.html":{},"injectables/CategoryService.html":{},"classes/ControllerBase.html":{},"classes/Media.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"controllers/PostController.html":{},"classes/PostDTO.html":{},"injectables/PostService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/QueryDTO.html":{},"classes/ResponseDTO.html":{},"injectables/ResponseHelper.html":{},"classes/ServiceBase.html":{},"classes/TokenDTO.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":220,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/PostController.html":{}}}],["delete(@req",{"_index":261,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/PostController.html":{}}}],["delete(request",{"_index":228,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/PostController.html":{}}}],["deletebyid",{"_index":268,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/MediaService.html":{},"injectables/PostService.html":{},"injectables/ProfileService.html":{},"classes/ServiceBase.html":{},"injectables/UserService.html":{}}}],["deletebyid(id",{"_index":282,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/MediaService.html":{},"injectables/PostService.html":{},"injectables/ProfileService.html":{},"classes/ServiceBase.html":{},"injectables/UserService.html":{}}}],["deletedmodel",{"_index":477,"title":{},"body":{"classes/ServiceBase.html":{}}}],["deletedmodel.save()).id",{"_index":478,"title":{},"body":{"classes/ServiceBase.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":196,"title":{},"body":{"classes/Category.html":{},"classes/CategoryDTO.html":{},"injectables/CategoryService.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":560,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":500,"title":{},"body":{"coverage.html":{}}}],["dto",{"_index":279,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/MediaService.html":{},"injectables/PostService.html":{},"injectables/ProfileService.html":{},"classes/ServiceBase.html":{},"injectables/UserService.html":{}}}],["dtos/common/basedto",{"_index":304,"title":{},"body":{"classes/ControllerBase.html":{},"classes/ServiceBase.html":{}}}],["dtos/common/querydto",{"_index":439,"title":{},"body":{"classes/ServiceBase.html":{}}}],["e2e",{"_index":571,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":547,"title":{},"body":{"index.html":{}}}],["email",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"classes/TokenDTO.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["error",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"classes/ResponseDTO.html":{},"injectables/ResponseHelper.html":{}}}],["exec",{"_index":333,"title":{},"body":{"classes/Media.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"injectables/PostService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/ServiceBase.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["expiresin",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"classes/BaseDTO.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryDTO.html":{},"injectables/CategoryService.html":{},"classes/ControllerBase.html":{},"interfaces/IDataFilter.html":{},"classes/Media.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"controllers/PostController.html":{},"classes/PostDTO.html":{},"injectables/PostService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/QueryDTO.html":{},"classes/ResponseDTO.html":{},"injectables/ResponseHelper.html":{},"classes/ServiceBase.html":{},"classes/TokenDTO.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["express",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/PostController.html":{},"dependencies.html":{}}}],["extends",{"_index":195,"title":{},"body":{"classes/Category.html":{},"classes/CategoryDTO.html":{},"injectables/CategoryService.html":{},"classes/Media.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"classes/PostDTO.html":{},"injectables/PostService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["extracttoken",{"_index":160,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["extracttoken(authorization",{"_index":163,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["false",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["fieldname",{"_index":315,"title":{},"body":{"interfaces/IDataFilter.html":{}}}],["fields",{"_index":311,"title":{},"body":{"interfaces/IDataFilter.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"classes/BaseDTO.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryDTO.html":{},"injectables/CategoryService.html":{},"classes/ControllerBase.html":{},"interfaces/IDataFilter.html":{},"classes/Media.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"controllers/PostController.html":{},"classes/PostDTO.html":{},"injectables/PostService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/QueryDTO.html":{},"classes/ResponseDTO.html":{},"injectables/ResponseHelper.html":{},"classes/ServiceBase.html":{},"classes/TokenDTO.html":{},"classes/User.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["filter",{"_index":286,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/MediaService.html":{},"injectables/PostService.html":{},"injectables/ProfileService.html":{},"classes/ServiceBase.html":{},"injectables/UserService.html":{}}}],["find",{"_index":269,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"injectables/PostService.html":{},"injectables/ProfileService.html":{},"classes/ServiceBase.html":{},"injectables/UserService.html":{}}}],["find(filter",{"_index":284,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/MediaService.html":{},"injectables/PostService.html":{},"injectables/ProfileService.html":{},"classes/ServiceBase.html":{},"injectables/UserService.html":{}}}],["findall",{"_index":270,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/MediaService.html":{},"injectables/PostService.html":{},"injectables/ProfileService.html":{},"classes/ServiceBase.html":{},"injectables/UserService.html":{}}}],["findall(query",{"_index":287,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/MediaService.html":{},"injectables/PostService.html":{},"injectables/ProfileService.html":{},"classes/ServiceBase.html":{},"injectables/UserService.html":{}}}],["findbyid",{"_index":271,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/MediaService.html":{},"injectables/PostService.html":{},"injectables/ProfileService.html":{},"classes/ServiceBase.html":{},"injectables/UserService.html":{}}}],["findbyid(id",{"_index":289,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/MediaService.html":{},"injectables/PostService.html":{},"injectables/ProfileService.html":{},"classes/ServiceBase.html":{},"injectables/UserService.html":{}}}],["findone",{"_index":272,"title":{},"body":{"injectables/CategoryService.html":{},"classes/Media.html":{},"injectables/MediaService.html":{},"injectables/PostService.html":{},"injectables/ProfileService.html":{},"classes/ServiceBase.html":{},"injectables/UserService.html":{}}}],["findone(filter",{"_index":291,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/MediaService.html":{},"injectables/PostService.html":{},"injectables/ProfileService.html":{},"classes/ServiceBase.html":{},"injectables/UserService.html":{}}}],["framework",{"_index":545,"title":{},"body":{"index.html":{}}}],["fullname",{"_index":391,"title":{},"body":{"classes/Profile.html":{},"injectables/ProfileService.html":{}}}],["function",{"_index":446,"title":{},"body":{"classes/ServiceBase.html":{},"coverage.html":{}}}],["functions",{"_index":539,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':id",{"_index":232,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/PostController.html":{}}}],["get('currentuser",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('delete/:id",{"_index":229,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/PostController.html":{}}}],["get('list",{"_index":237,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/PostController.html":{}}}],["get('list/:categoryid",{"_index":365,"title":{},"body":{"controllers/PostController.html":{}}}],["getbycategoryid",{"_index":385,"title":{},"body":{"injectables/PostService.html":{}}}],["getbycategoryid(id",{"_index":349,"title":{},"body":{"classes/Post.html":{},"injectables/PostService.html":{}}}],["getbyid",{"_index":221,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/PostController.html":{}}}],["getbyid(@req",{"_index":251,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/PostController.html":{}}}],["getbyid(request",{"_index":231,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/PostController.html":{}}}],["getbykey",{"_index":334,"title":{},"body":{"injectables/MediaService.html":{}}}],["getbykey(key",{"_index":331,"title":{},"body":{"classes/Media.html":{},"injectables/MediaService.html":{}}}],["getbyuserid",{"_index":403,"title":{},"body":{"injectables/ProfileService.html":{}}}],["getbyuserid(id",{"_index":401,"title":{},"body":{"classes/Profile.html":{},"injectables/ProfileService.html":{}}}],["getcount",{"_index":273,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/MediaService.html":{},"injectables/PostService.html":{},"injectables/ProfileService.html":{},"classes/ServiceBase.html":{},"injectables/UserService.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":541,"title":{"index.html":{}},"body":{}}],["getuserbyemailpassword",{"_index":495,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserbyemailpassword(email",{"_index":492,"title":{},"body":{"classes/User.html":{},"injectables/UserService.html":{}}}],["getusers",{"_index":493,"title":{},"body":{"classes/User.html":{},"injectables/UserService.html":{}}}],["grow",{"_index":578,"title":{},"body":{"index.html":{}}}],["hello",{"_index":87,"title":{},"body":{"injectables/AppService.html":{}}}],["helpers/auth.helper",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/PostController.html":{}}}],["helpers/response.helper",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/PostController.html":{}}}],["here",{"_index":589,"title":{},"body":{"index.html":{}}}],["http_status",{"_index":509,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["https://docs.nestjs.com/controllers#controllers",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{}}}],["https://nestjs.com",{"_index":596,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ResponseHelper.html":{}}}],["httpstatus.accepted",{"_index":425,"title":{},"body":{"injectables/ResponseHelper.html":{}}}],["httpstatus.bad_request",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["hydrateddocument",{"_index":210,"title":{},"body":{"classes/Category.html":{},"injectables/CategoryService.html":{},"classes/Media.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"injectables/PostService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["id",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"classes/BaseDTO.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryDTO.html":{},"injectables/CategoryService.html":{},"classes/Media.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"controllers/PostController.html":{},"classes/PostDTO.html":{},"injectables/PostService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/ServiceBase.html":{},"classes/TokenDTO.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["idatafilter",{"_index":307,"title":{"interfaces/IDataFilter.html":{}},"body":{"interfaces/IDataFilter.html":{},"coverage.html":{}}}],["identifier",{"_index":501,"title":{},"body":{"coverage.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"classes/BaseDTO.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryDTO.html":{},"injectables/CategoryService.html":{},"classes/ControllerBase.html":{},"classes/Media.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"controllers/PostController.html":{},"classes/PostDTO.html":{},"injectables/PostService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"injectables/ResponseHelper.html":{},"classes/ServiceBase.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"classes/BaseDTO.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryDTO.html":{},"injectables/CategoryService.html":{},"classes/ControllerBase.html":{},"interfaces/IDataFilter.html":{},"classes/Media.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"controllers/PostController.html":{},"classes/PostDTO.html":{},"injectables/PostService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/QueryDTO.html":{},"classes/ResponseDTO.html":{},"injectables/ResponseHelper.html":{},"classes/ServiceBase.html":{},"classes/TokenDTO.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"classes/BaseDTO.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryDTO.html":{},"injectables/CategoryService.html":{},"classes/ControllerBase.html":{},"interfaces/IDataFilter.html":{},"classes/Media.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"controllers/PostController.html":{},"classes/PostDTO.html":{},"injectables/PostService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/QueryDTO.html":{},"classes/ResponseDTO.html":{},"injectables/ResponseHelper.html":{},"classes/ServiceBase.html":{},"classes/TokenDTO.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["inherited",{"_index":201,"title":{},"body":{"classes/Category.html":{},"classes/CategoryDTO.html":{},"injectables/CategoryService.html":{},"classes/Media.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"classes/PostDTO.html":{},"injectables/PostService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["injectable",{"_index":83,"title":{"injectables/AppService.html":{},"injectables/AuthHelper.html":{},"injectables/CategoryService.html":{},"injectables/MediaService.html":{},"injectables/PostService.html":{},"injectables/ProfileService.html":{},"injectables/ResponseHelper.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthHelper.html":{},"classes/Category.html":{},"injectables/CategoryService.html":{},"classes/Media.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"injectables/PostService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"injectables/ResponseHelper.html":{},"classes/User.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":84,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthHelper.html":{},"injectables/CategoryService.html":{},"injectables/MediaService.html":{},"injectables/PostService.html":{},"injectables/ProfileService.html":{},"injectables/ResponseHelper.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectmodel",{"_index":208,"title":{},"body":{"classes/Category.html":{},"injectables/CategoryService.html":{},"classes/Media.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"injectables/PostService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["injectmodel(category.name",{"_index":215,"title":{},"body":{"classes/Category.html":{},"injectables/CategoryService.html":{}}}],["injectmodel(profile.name",{"_index":400,"title":{},"body":{"classes/Profile.html":{},"injectables/ProfileService.html":{}}}],["installation",{"_index":556,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":558,"title":{},"body":{"index.html":{}}}],["interface",{"_index":306,"title":{"interfaces/IDataFilter.html":{}},"body":{"interfaces/IDataFilter.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":308,"title":{},"body":{"interfaces/IDataFilter.html":{}}}],["join",{"_index":585,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":530,"title":{},"body":{"dependencies.html":{}}}],["jwtmodule",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtmodule.register",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtservice",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthHelper.html":{}}}],["kamil",{"_index":593,"title":{},"body":{"index.html":{}}}],["key",{"_index":321,"title":{},"body":{"classes/Media.html":{},"injectables/MediaService.html":{}}}],["license",{"_index":599,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":575,"title":{},"body":{"index.html":{}}}],["limit",{"_index":312,"title":{},"body":{"interfaces/IDataFilter.html":{},"classes/QueryDTO.html":{}}}],["limit(number(query.limit",{"_index":351,"title":{},"body":{"classes/Post.html":{},"injectables/PostService.html":{},"classes/ServiceBase.html":{}}}],["list",{"_index":222,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/PostController.html":{}}}],["list(@req",{"_index":246,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/PostController.html":{}}}],["list(request",{"_index":234,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/PostController.html":{}}}],["listbycategoryid",{"_index":358,"title":{},"body":{"controllers/PostController.html":{}}}],["listbycategoryid(@req",{"_index":374,"title":{},"body":{"controllers/PostController.html":{}}}],["listbycategoryid(request",{"_index":364,"title":{},"body":{"controllers/PostController.html":{}}}],["literal",{"_index":183,"title":{},"body":{"classes/BaseDTO.html":{},"classes/Category.html":{},"classes/CategoryDTO.html":{},"interfaces/IDataFilter.html":{},"classes/Media.html":{},"classes/Post.html":{},"classes/PostDTO.html":{},"classes/Profile.html":{},"classes/User.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"classes/BaseDTO.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryDTO.html":{},"injectables/CategoryService.html":{},"classes/ControllerBase.html":{},"interfaces/IDataFilter.html":{},"classes/Media.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"controllers/PostController.html":{},"classes/PostDTO.html":{},"injectables/PostService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/QueryDTO.html":{},"classes/ResponseDTO.html":{},"injectables/ResponseHelper.html":{},"classes/ServiceBase.html":{},"classes/TokenDTO.html":{},"classes/User.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.random",{"_index":449,"title":{},"body":{"classes/ServiceBase.html":{}}}],["media",{"_index":319,"title":{"classes/Media.html":{}},"body":{"classes/Media.html":{},"injectables/MediaService.html":{},"coverage.html":{}}}],["mediadocument",{"_index":326,"title":{},"body":{"classes/Media.html":{},"injectables/MediaService.html":{},"miscellaneous/typealiases.html":{}}}],["mediaschema",{"_index":327,"title":{},"body":{"classes/Media.html":{},"injectables/MediaService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mediaservice",{"_index":329,"title":{"injectables/MediaService.html":{}},"body":{"classes/Media.html":{},"injectables/MediaService.html":{},"coverage.html":{}}}],["metadata",{"_index":179,"title":{},"body":{"classes/BaseDTO.html":{},"classes/Category.html":{},"classes/CategoryDTO.html":{},"classes/Media.html":{},"classes/Post.html":{},"classes/PostDTO.html":{},"classes/Profile.html":{},"classes/User.html":{},"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/ControllerBase.html":{},"injectables/MediaService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/ProfileService.html":{},"injectables/ResponseHelper.html":{},"classes/ServiceBase.html":{},"injectables/UserService.html":{}}}],["miscellaneous",{"_index":538,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":574,"title":{},"body":{"index.html":{}}}],["mode",{"_index":564,"title":{},"body":{"index.html":{}}}],["model",{"_index":211,"title":{},"body":{"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/Media.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/ServiceBase.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["model.id",{"_index":260,"title":{},"body":{"controllers/CategoryController.html":{},"classes/ServiceBase.html":{}}}],["model.metadata",{"_index":463,"title":{},"body":{"classes/ServiceBase.html":{}}}],["modifiedby",{"_index":191,"title":{},"body":{"classes/BaseDTO.html":{}}}],["modifiedtime",{"_index":189,"title":{},"body":{"classes/BaseDTO.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{}}}],["mongoose",{"_index":212,"title":{},"body":{"classes/Category.html":{},"injectables/CategoryService.html":{},"classes/Media.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"injectables/PostService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/ServiceBase.html":{},"classes/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["mongoosemodule",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["mongoosemodule.forfeature",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["mongoosemodule.forroot('mongodb://localhost:27017/test",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":588,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":594,"title":{},"body":{"index.html":{}}}],["name",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryDTO.html":{},"injectables/CategoryService.html":{},"classes/ControllerBase.html":{},"injectables/MediaService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/ProfileService.html":{},"injectables/ResponseHelper.html":{},"classes/ServiceBase.html":{},"injectables/UserService.html":{}}}],["nest",{"_index":552,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":598,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/Media.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"injectables/ResponseHelper.html":{},"classes/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":524,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"classes/BaseDTO.html":{},"classes/Category.html":{},"injectables/CategoryService.html":{},"classes/Media.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"injectables/PostService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":527,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ResponseHelper.html":{},"classes/ServiceBase.html":{},"coverage.html":{}}}],["newguid",{"_index":274,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/MediaService.html":{},"injectables/PostService.html":{},"injectables/ProfileService.html":{},"classes/ServiceBase.html":{},"injectables/UserService.html":{}}}],["node.js",{"_index":544,"title":{},"body":{"index.html":{}}}],["npm",{"_index":557,"title":{},"body":{"index.html":{}}}],["null",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"classes/ServiceBase.html":{}}}],["number",{"_index":193,"title":{},"body":{"classes/BaseDTO.html":{},"interfaces/IDataFilter.html":{},"classes/ResponseDTO.html":{}}}],["object",{"_index":185,"title":{},"body":{"classes/BaseDTO.html":{},"classes/Category.html":{},"classes/CategoryDTO.html":{},"classes/Media.html":{},"classes/Post.html":{},"classes/PostDTO.html":{},"classes/Profile.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["open",{"_index":576,"title":{},"body":{"index.html":{}}}],["operator",{"_index":316,"title":{},"body":{"interfaces/IDataFilter.html":{}}}],["optional",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"classes/BaseDTO.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryDTO.html":{},"injectables/CategoryService.html":{},"classes/ControllerBase.html":{},"classes/Media.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"controllers/PostController.html":{},"classes/PostDTO.html":{},"injectables/PostService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/ResponseDTO.html":{},"injectables/ResponseHelper.html":{},"classes/ServiceBase.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["order",{"_index":318,"title":{},"body":{"interfaces/IDataFilter.html":{}}}],["orderby",{"_index":407,"title":{},"body":{"classes/QueryDTO.html":{}}}],["out",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["overview",{"_index":603,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":522,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["parameters",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/ControllerBase.html":{},"injectables/MediaService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/ProfileService.html":{},"injectables/ResponseHelper.html":{},"classes/ServiceBase.html":{},"injectables/UserService.html":{}}}],["parentcategoryid",{"_index":197,"title":{},"body":{"classes/Category.html":{},"classes/CategoryDTO.html":{},"injectables/CategoryService.html":{}}}],["passport",{"_index":529,"title":{},"body":{"dependencies.html":{}}}],["password",{"_index":484,"title":{},"body":{"classes/User.html":{},"injectables/UserService.html":{}}}],["please",{"_index":586,"title":{},"body":{"index.html":{}}}],["post",{"_index":58,"title":{"classes/Post.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"classes/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["post('create",{"_index":226,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/PostController.html":{}}}],["post('login",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('update",{"_index":240,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/PostController.html":{}}}],["post.name",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["postcontroller",{"_index":46,"title":{"controllers/PostController.html":{}},"body":{"modules/AppModule.html":{},"controllers/PostController.html":{},"coverage.html":{}}}],["postdocument",{"_index":346,"title":{},"body":{"classes/Post.html":{},"injectables/PostService.html":{},"miscellaneous/typealiases.html":{}}}],["postdto",{"_index":359,"title":{"classes/PostDTO.html":{}},"body":{"controllers/PostController.html":{},"classes/PostDTO.html":{},"coverage.html":{}}}],["postschema",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"classes/Post.html":{},"injectables/PostService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["postservice",{"_index":36,"title":{"injectables/PostService.html":{}},"body":{"modules/AppModule.html":{},"classes/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"coverage.html":{},"overview.html":{}}}],["prefix",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/PostController.html":{}}}],["private",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/Media.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["production",{"_index":566,"title":{},"body":{"index.html":{}}}],["profile",{"_index":49,"title":{"classes/Profile.html":{}},"body":{"modules/AppModule.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"coverage.html":{}}}],["profile.name",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["profiledocument",{"_index":398,"title":{},"body":{"classes/Profile.html":{},"injectables/ProfileService.html":{},"miscellaneous/typealiases.html":{}}}],["profileschema",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["profileservice",{"_index":37,"title":{"injectables/ProfileService.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"coverage.html":{},"overview.html":{}}}],["profilpicture",{"_index":392,"title":{},"body":{"classes/Profile.html":{},"injectables/ProfileService.html":{}}}],["progressive",{"_index":543,"title":{},"body":{"index.html":{}}}],["project",{"_index":577,"title":{},"body":{"index.html":{}}}],["prop",{"_index":180,"title":{},"body":{"classes/BaseDTO.html":{},"classes/Category.html":{},"classes/CategoryDTO.html":{},"injectables/CategoryService.html":{},"classes/Media.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"classes/PostDTO.html":{},"injectables/PostService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["prop({type",{"_index":184,"title":{},"body":{"classes/BaseDTO.html":{},"classes/Category.html":{},"classes/CategoryDTO.html":{},"classes/Media.html":{},"classes/Post.html":{},"classes/PostDTO.html":{},"classes/Profile.html":{},"classes/User.html":{}}}],["properties",{"_index":177,"title":{"properties.html":{}},"body":{"classes/BaseDTO.html":{},"classes/Category.html":{},"classes/CategoryDTO.html":{},"interfaces/IDataFilter.html":{},"classes/Media.html":{},"classes/Post.html":{},"classes/PostDTO.html":{},"classes/Profile.html":{},"classes/QueryDTO.html":{},"classes/ResponseDTO.html":{},"classes/TokenDTO.html":{},"classes/User.html":{},"properties.html":{}}}],["providers",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["query",{"_index":235,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/ProfileService.html":{},"classes/ServiceBase.html":{},"injectables/UserService.html":{}}}],["querydto",{"_index":236,"title":{"classes/QueryDTO.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/ProfileService.html":{},"classes/QueryDTO.html":{},"classes/ServiceBase.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["r",{"_index":448,"title":{},"body":{"classes/ServiceBase.html":{}}}],["read",{"_index":587,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{}}}],["reflect",{"_index":532,"title":{},"body":{"dependencies.html":{}}}],["repository",{"_index":555,"title":{},"body":{"index.html":{}}}],["req",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/PostController.html":{}}}],["request",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/PostController.html":{}}}],["request.body",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["request.headers.authorization",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["request.params.categoryid",{"_index":375,"title":{},"body":{"controllers/PostController.html":{}}}],["request.params.id",{"_index":252,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/PostController.html":{}}}],["reset",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["response",{"_index":370,"title":{},"body":{"controllers/PostController.html":{},"injectables/ResponseHelper.html":{}}}],["response(data",{"_index":422,"title":{},"body":{"injectables/ResponseHelper.html":{}}}],["responsedto",{"_index":118,"title":{"classes/ResponseDTO.html":{}},"body":{"controllers/AuthController.html":{},"classes/ResponseDTO.html":{},"injectables/ResponseHelper.html":{},"coverage.html":{}}}],["responsehelper",{"_index":38,"title":{"injectables/ResponseHelper.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/PostController.html":{},"injectables/ResponseHelper.html":{},"coverage.html":{},"overview.html":{}}}],["result",{"_index":247,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/PostController.html":{}}}],["result.count",{"_index":250,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/PostController.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"classes/BaseDTO.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryDTO.html":{},"injectables/CategoryService.html":{},"classes/ControllerBase.html":{},"interfaces/IDataFilter.html":{},"classes/Media.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"controllers/PostController.html":{},"classes/PostDTO.html":{},"injectables/PostService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/QueryDTO.html":{},"classes/ResponseDTO.html":{},"injectables/ResponseHelper.html":{},"classes/ServiceBase.html":{},"classes/TokenDTO.html":{},"classes/User.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"controllers/CategoryController.html":{},"classes/Media.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"injectables/ResponseHelper.html":{},"classes/ServiceBase.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/ControllerBase.html":{},"injectables/MediaService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/ProfileService.html":{},"injectables/ResponseHelper.html":{},"classes/ServiceBase.html":{},"injectables/UserService.html":{}}}],["rimraf",{"_index":534,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":561,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":536,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":548,"title":{},"body":{"index.html":{}}}],["schema",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"classes/Category.html":{},"injectables/CategoryService.html":{},"classes/Media.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"injectables/PostService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["schemafactory",{"_index":209,"title":{},"body":{"classes/Category.html":{},"injectables/CategoryService.html":{},"classes/Media.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"injectables/PostService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["schemafactory.createforclass(category",{"_index":214,"title":{},"body":{"classes/Category.html":{},"injectables/CategoryService.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(media",{"_index":328,"title":{},"body":{"classes/Media.html":{},"injectables/MediaService.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(post",{"_index":347,"title":{},"body":{"classes/Post.html":{},"injectables/PostService.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(profile",{"_index":399,"title":{},"body":{"classes/Profile.html":{},"injectables/ProfileService.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":490,"title":{},"body":{"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["secret",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["secretkey",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["server",{"_index":549,"title":{},"body":{"index.html":{}}}],["service",{"_index":302,"title":{},"body":{"classes/ControllerBase.html":{}}}],["servicebase",{"_index":205,"title":{"classes/ServiceBase.html":{}},"body":{"classes/Category.html":{},"injectables/CategoryService.html":{},"classes/ControllerBase.html":{},"classes/Media.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"injectables/PostService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/ServiceBase.html":{},"classes/User.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["servicebase:17",{"_index":292,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/MediaService.html":{},"injectables/PostService.html":{},"injectables/ProfileService.html":{},"injectables/UserService.html":{}}}],["servicebase:20",{"_index":288,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/MediaService.html":{},"injectables/PostService.html":{},"injectables/ProfileService.html":{},"injectables/UserService.html":{}}}],["servicebase:31",{"_index":293,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/MediaService.html":{},"injectables/PostService.html":{},"injectables/ProfileService.html":{},"injectables/UserService.html":{}}}],["servicebase:32",{"_index":285,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/MediaService.html":{},"injectables/PostService.html":{},"injectables/ProfileService.html":{},"injectables/UserService.html":{}}}],["servicebase:35",{"_index":290,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/MediaService.html":{},"injectables/PostService.html":{},"injectables/ProfileService.html":{},"injectables/UserService.html":{}}}],["servicebase:38",{"_index":281,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/MediaService.html":{},"injectables/PostService.html":{},"injectables/ProfileService.html":{},"injectables/UserService.html":{}}}],["servicebase:48",{"_index":297,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/MediaService.html":{},"injectables/PostService.html":{},"injectables/ProfileService.html":{},"injectables/UserService.html":{}}}],["servicebase:7",{"_index":295,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/MediaService.html":{},"injectables/PostService.html":{},"injectables/ProfileService.html":{},"injectables/UserService.html":{}}}],["servicebase:73",{"_index":283,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/MediaService.html":{},"injectables/PostService.html":{},"injectables/ProfileService.html":{},"injectables/UserService.html":{}}}],["services/category.service",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"controllers/CategoryController.html":{}}}],["services/post.service",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"controllers/PostController.html":{}}}],["services/profile.service",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{}}}],["services/user.service",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{}}}],["side",{"_index":550,"title":{},"body":{"index.html":{}}}],["signin",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(@req",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(request",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["signoptions",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["signup",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(@req",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(request",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{}}}],["skip",{"_index":313,"title":{},"body":{"interfaces/IDataFilter.html":{},"classes/QueryDTO.html":{}}}],["skip(number(query.limit",{"_index":352,"title":{},"body":{"classes/Post.html":{},"injectables/PostService.html":{}}}],["skip(number(query.skip",{"_index":458,"title":{},"body":{"classes/ServiceBase.html":{}}}],["sort(query.orderby",{"_index":353,"title":{},"body":{"classes/Post.html":{},"injectables/PostService.html":{},"classes/ServiceBase.html":{}}}],["sorts",{"_index":314,"title":{},"body":{"interfaces/IDataFilter.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"classes/BaseDTO.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryDTO.html":{},"injectables/CategoryService.html":{},"classes/ControllerBase.html":{},"interfaces/IDataFilter.html":{},"classes/Media.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"controllers/PostController.html":{},"classes/PostDTO.html":{},"injectables/PostService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/QueryDTO.html":{},"classes/ResponseDTO.html":{},"injectables/ResponseHelper.html":{},"classes/ServiceBase.html":{},"classes/TokenDTO.html":{},"classes/User.html":{},"injectables/UserService.html":{},"index.html":{}}}],["sponsors",{"_index":580,"title":{},"body":{"index.html":{}}}],["src/.../category.service.ts",{"_index":612,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../http",{"_index":618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":540,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../media.service.ts",{"_index":613,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../post.service.ts",{"_index":614,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../profile.service.ts",{"_index":615,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../user.service.ts",{"_index":616,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":85,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":86,"title":{},"body":{"injectables/AppService.html":{}}}],["src/common/abstracts/controllerbase.ts",{"_index":299,"title":{},"body":{"classes/ControllerBase.html":{},"coverage.html":{}}}],["src/common/abstracts/controllerbase.ts:4",{"_index":301,"title":{},"body":{"classes/ControllerBase.html":{}}}],["src/common/abstracts/controllerbase.ts:6",{"_index":303,"title":{},"body":{"classes/ControllerBase.html":{}}}],["src/common/abstracts/servicebase.ts",{"_index":427,"title":{},"body":{"classes/ServiceBase.html":{},"coverage.html":{}}}],["src/common/abstracts/servicebase.ts:17",{"_index":435,"title":{},"body":{"classes/ServiceBase.html":{}}}],["src/common/abstracts/servicebase.ts:20",{"_index":433,"title":{},"body":{"classes/ServiceBase.html":{}}}],["src/common/abstracts/servicebase.ts:31",{"_index":436,"title":{},"body":{"classes/ServiceBase.html":{}}}],["src/common/abstracts/servicebase.ts:32",{"_index":432,"title":{},"body":{"classes/ServiceBase.html":{}}}],["src/common/abstracts/servicebase.ts:35",{"_index":434,"title":{},"body":{"classes/ServiceBase.html":{}}}],["src/common/abstracts/servicebase.ts:38",{"_index":430,"title":{},"body":{"classes/ServiceBase.html":{}}}],["src/common/abstracts/servicebase.ts:48",{"_index":438,"title":{},"body":{"classes/ServiceBase.html":{}}}],["src/common/abstracts/servicebase.ts:5",{"_index":429,"title":{},"body":{"classes/ServiceBase.html":{}}}],["src/common/abstracts/servicebase.ts:7",{"_index":437,"title":{},"body":{"classes/ServiceBase.html":{}}}],["src/common/abstracts/servicebase.ts:73",{"_index":431,"title":{},"body":{"classes/ServiceBase.html":{}}}],["src/common/const/http",{"_index":506,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/dtos/cms/categorydto.ts",{"_index":263,"title":{},"body":{"classes/CategoryDTO.html":{},"coverage.html":{}}}],["src/common/dtos/cms/categorydto.ts:4",{"_index":265,"title":{},"body":{"classes/CategoryDTO.html":{}}}],["src/common/dtos/cms/categorydto.ts:5",{"_index":264,"title":{},"body":{"classes/CategoryDTO.html":{}}}],["src/common/dtos/cms/categorydto.ts:6",{"_index":266,"title":{},"body":{"classes/CategoryDTO.html":{}}}],["src/common/dtos/cms/postdto.ts",{"_index":380,"title":{},"body":{"classes/PostDTO.html":{},"coverage.html":{}}}],["src/common/dtos/cms/postdto.ts:4",{"_index":381,"title":{},"body":{"classes/PostDTO.html":{}}}],["src/common/dtos/cms/postdto.ts:5",{"_index":382,"title":{},"body":{"classes/PostDTO.html":{}}}],["src/common/dtos/cms/postdto.ts:6",{"_index":384,"title":{},"body":{"classes/PostDTO.html":{}}}],["src/common/dtos/cms/postdto.ts:7",{"_index":383,"title":{},"body":{"classes/PostDTO.html":{}}}],["src/common/dtos/common/basedto.ts",{"_index":176,"title":{},"body":{"classes/BaseDTO.html":{},"coverage.html":{}}}],["src/common/dtos/common/basedto.ts:5",{"_index":182,"title":{},"body":{"classes/BaseDTO.html":{}}}],["src/common/dtos/common/basedto.ts:7",{"_index":181,"title":{},"body":{"classes/BaseDTO.html":{}}}],["src/common/dtos/common/basedto.ts:9",{"_index":186,"title":{},"body":{"classes/BaseDTO.html":{}}}],["src/common/dtos/common/querydto",{"_index":369,"title":{},"body":{"controllers/PostController.html":{}}}],["src/common/dtos/common/querydto.ts",{"_index":406,"title":{},"body":{"classes/QueryDTO.html":{},"coverage.html":{}}}],["src/common/dtos/common/querydto.ts:2",{"_index":408,"title":{},"body":{"classes/QueryDTO.html":{}}}],["src/common/dtos/common/querydto.ts:3",{"_index":410,"title":{},"body":{"classes/QueryDTO.html":{}}}],["src/common/dtos/common/querydto.ts:4",{"_index":409,"title":{},"body":{"classes/QueryDTO.html":{}}}],["src/common/dtos/common/responsedto.ts",{"_index":411,"title":{},"body":{"classes/ResponseDTO.html":{},"coverage.html":{}}}],["src/common/dtos/common/responsedto.ts:2",{"_index":416,"title":{},"body":{"classes/ResponseDTO.html":{}}}],["src/common/dtos/common/responsedto.ts:3",{"_index":420,"title":{},"body":{"classes/ResponseDTO.html":{}}}],["src/common/dtos/common/responsedto.ts:4",{"_index":418,"title":{},"body":{"classes/ResponseDTO.html":{}}}],["src/common/dtos/common/responsedto.ts:5",{"_index":417,"title":{},"body":{"classes/ResponseDTO.html":{}}}],["src/common/dtos/common/responsedto.ts:6",{"_index":415,"title":{},"body":{"classes/ResponseDTO.html":{}}}],["src/common/dtos/common/responsedto.ts:7",{"_index":419,"title":{},"body":{"classes/ResponseDTO.html":{}}}],["src/common/dtos/common/tokendto.ts",{"_index":479,"title":{},"body":{"classes/TokenDTO.html":{},"coverage.html":{}}}],["src/common/dtos/common/tokendto.ts:2",{"_index":481,"title":{},"body":{"classes/TokenDTO.html":{}}}],["src/common/dtos/common/tokendto.ts:3",{"_index":480,"title":{},"body":{"classes/TokenDTO.html":{}}}],["src/common/types/idatafilter.ts",{"_index":309,"title":{},"body":{"interfaces/IDataFilter.html":{},"coverage.html":{}}}],["src/controllers/auth.controller.ts",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/controllers/auth.controller.ts:26",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/controllers/auth.controller.ts:51",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/controllers/auth.controller.ts:74",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/controllers/category.controller.ts",{"_index":218,"title":{},"body":{"controllers/CategoryController.html":{},"coverage.html":{}}}],["src/controllers/category.controller.ts:17",{"_index":238,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/controllers/category.controller.ts:22",{"_index":233,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/controllers/category.controller.ts:28",{"_index":227,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/controllers/category.controller.ts:35",{"_index":241,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/controllers/category.controller.ts:46",{"_index":230,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/controllers/post.controller.ts",{"_index":357,"title":{},"body":{"controllers/PostController.html":{},"coverage.html":{}}}],["src/controllers/post.controller.ts:21",{"_index":363,"title":{},"body":{"controllers/PostController.html":{}}}],["src/controllers/post.controller.ts:26",{"_index":362,"title":{},"body":{"controllers/PostController.html":{}}}],["src/controllers/post.controller.ts:32",{"_index":366,"title":{},"body":{"controllers/PostController.html":{}}}],["src/controllers/post.controller.ts:38",{"_index":360,"title":{},"body":{"controllers/PostController.html":{}}}],["src/controllers/post.controller.ts:45",{"_index":367,"title":{},"body":{"controllers/PostController.html":{}}}],["src/controllers/post.controller.ts:52",{"_index":361,"title":{},"body":{"controllers/PostController.html":{}}}],["src/helpers/auth.helper.ts",{"_index":159,"title":{},"body":{"injectables/AuthHelper.html":{},"coverage.html":{}}}],["src/helpers/auth.helper.ts:6",{"_index":162,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["src/helpers/auth.helper.ts:8",{"_index":164,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["src/helpers/response.helper.ts",{"_index":421,"title":{},"body":{"injectables/ResponseHelper.html":{},"coverage.html":{}}}],["src/helpers/response.helper.ts:6",{"_index":423,"title":{},"body":{"injectables/ResponseHelper.html":{}}}],["src/main.ts",{"_index":515,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/services/category.service.ts",{"_index":194,"title":{},"body":{"classes/Category.html":{},"injectables/CategoryService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/services/category.service.ts:10",{"_index":199,"title":{},"body":{"classes/Category.html":{}}}],["src/services/category.service.ts:12",{"_index":198,"title":{},"body":{"classes/Category.html":{}}}],["src/services/category.service.ts:14",{"_index":200,"title":{},"body":{"classes/Category.html":{}}}],["src/services/category.service.ts:21",{"_index":277,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/services/media.service.ts",{"_index":320,"title":{},"body":{"classes/Media.html":{},"injectables/MediaService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/services/media.service.ts:10",{"_index":323,"title":{},"body":{"classes/Media.html":{}}}],["src/services/media.service.ts:12",{"_index":324,"title":{},"body":{"classes/Media.html":{}}}],["src/services/media.service.ts:14",{"_index":325,"title":{},"body":{"classes/Media.html":{}}}],["src/services/media.service.ts:21",{"_index":335,"title":{},"body":{"injectables/MediaService.html":{}}}],["src/services/media.service.ts:25",{"_index":336,"title":{},"body":{"injectables/MediaService.html":{}}}],["src/services/post.service.ts",{"_index":337,"title":{},"body":{"classes/Post.html":{},"injectables/PostService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/services/post.service.ts:11",{"_index":342,"title":{},"body":{"classes/Post.html":{}}}],["src/services/post.service.ts:13",{"_index":343,"title":{},"body":{"classes/Post.html":{}}}],["src/services/post.service.ts:15",{"_index":345,"title":{},"body":{"classes/Post.html":{}}}],["src/services/post.service.ts:17",{"_index":344,"title":{},"body":{"classes/Post.html":{}}}],["src/services/post.service.ts:24",{"_index":386,"title":{},"body":{"injectables/PostService.html":{}}}],["src/services/post.service.ts:28",{"_index":387,"title":{},"body":{"injectables/PostService.html":{}}}],["src/services/profile.service.ts",{"_index":388,"title":{},"body":{"classes/Profile.html":{},"injectables/ProfileService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/services/profile.service.ts:10",{"_index":397,"title":{},"body":{"classes/Profile.html":{}}}],["src/services/profile.service.ts:12",{"_index":395,"title":{},"body":{"classes/Profile.html":{}}}],["src/services/profile.service.ts:14",{"_index":396,"title":{},"body":{"classes/Profile.html":{}}}],["src/services/profile.service.ts:16",{"_index":394,"title":{},"body":{"classes/Profile.html":{}}}],["src/services/profile.service.ts:18",{"_index":393,"title":{},"body":{"classes/Profile.html":{}}}],["src/services/profile.service.ts:25",{"_index":404,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/services/profile.service.ts:31",{"_index":405,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/services/user.service.ts",{"_index":482,"title":{},"body":{"classes/User.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/services/user.service.ts:10",{"_index":487,"title":{},"body":{"classes/User.html":{}}}],["src/services/user.service.ts:12",{"_index":488,"title":{},"body":{"classes/User.html":{}}}],["src/services/user.service.ts:14",{"_index":486,"title":{},"body":{"classes/User.html":{}}}],["src/services/user.service.ts:21",{"_index":496,"title":{},"body":{"injectables/UserService.html":{}}}],["src/services/user.service.ts:25",{"_index":497,"title":{},"body":{"injectables/UserService.html":{}}}],["src/services/user.service.ts:29",{"_index":498,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":562,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":565,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":567,"title":{},"body":{"index.html":{}}}],["started",{"_index":542,"title":{"index.html":{}},"body":{}}],["starter",{"_index":554,"title":{},"body":{"index.html":{}}}],["statements",{"_index":502,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":412,"title":{},"body":{"classes/ResponseDTO.html":{},"injectables/ResponseHelper.html":{}}}],["status.const.ts",{"_index":507,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["stay",{"_index":590,"title":{},"body":{"index.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthHelper.html":{},"classes/BaseDTO.html":{},"classes/Category.html":{},"classes/CategoryDTO.html":{},"injectables/CategoryService.html":{},"interfaces/IDataFilter.html":{},"classes/Media.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"classes/PostDTO.html":{},"injectables/PostService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/QueryDTO.html":{},"classes/ResponseDTO.html":{},"classes/ServiceBase.html":{},"classes/TokenDTO.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["success",{"_index":622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["super(_model",{"_index":217,"title":{},"body":{"classes/Category.html":{},"injectables/CategoryService.html":{},"classes/Media.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"injectables/PostService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["support",{"_index":581,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":601,"title":{},"body":{"modules.html":{}}}],["table",{"_index":521,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":520,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":570,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":573,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":572,"title":{},"body":{"index.html":{}}}],["tests",{"_index":569,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":579,"title":{},"body":{"index.html":{}}}],["this._model",{"_index":332,"title":{},"body":{"classes/Media.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"injectables/PostService.html":{}}}],["this._model.find",{"_index":355,"title":{},"body":{"classes/Post.html":{},"injectables/PostService.html":{}}}],["this._model.find().exec",{"_index":494,"title":{},"body":{"classes/User.html":{},"injectables/UserService.html":{}}}],["this._model.findone",{"_index":402,"title":{},"body":{"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authhelper.extracttoken",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authhelper.extracttoken(request.headers.authorization",{"_index":256,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/PostController.html":{}}}],["this.categoryservice.create(model",{"_index":257,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.deletebyid(id",{"_index":262,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findall(query",{"_index":248,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findbyid(id",{"_index":253,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.updatebyid",{"_index":259,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.jwtservice.sign",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.jwtservice.verify(token",{"_index":173,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["this.model",{"_index":457,"title":{},"body":{"classes/ServiceBase.html":{}}}],["this.model(model",{"_index":466,"title":{},"body":{"classes/ServiceBase.html":{}}}],["this.model.count().exec",{"_index":459,"title":{},"body":{"classes/ServiceBase.html":{}}}],["this.model.find(filter).exec",{"_index":460,"title":{},"body":{"classes/ServiceBase.html":{}}}],["this.model.findone",{"_index":461,"title":{},"body":{"classes/ServiceBase.html":{}}}],["this.model.findone(filter).exec",{"_index":456,"title":{},"body":{"classes/ServiceBase.html":{}}}],["this.model.findoneandupdate",{"_index":473,"title":{},"body":{"classes/ServiceBase.html":{}}}],["this.newguid",{"_index":462,"title":{},"body":{"classes/ServiceBase.html":{}}}],["this.postservice.create(model",{"_index":377,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.deletebyid(id",{"_index":379,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.findall(query",{"_index":372,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.findbyid(id",{"_index":373,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.getbycategoryid(categoryid",{"_index":376,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.updatebyid(model.id",{"_index":378,"title":{},"body":{"controllers/PostController.html":{}}}],["this.responsehelper.response",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.responsehelper.response(_user.id",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.responsehelper.response(access_token",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.responsehelper.response(result",{"_index":254,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/PostController.html":{}}}],["this.responsehelper.response(result.data",{"_index":249,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/PostController.html":{}}}],["this.service",{"_index":305,"title":{},"body":{"classes/ControllerBase.html":{}}}],["this.userservice.create(user",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.findbyid(currentuser.id",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.getuserbyemailpassword",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["timestap",{"_index":413,"title":{},"body":{"classes/ResponseDTO.html":{},"injectables/ResponseHelper.html":{}}}],["title",{"_index":341,"title":{},"body":{"classes/Post.html":{},"classes/PostDTO.html":{},"injectables/PostService.html":{}}}],["token",{"_index":170,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["tokendto",{"_index":111,"title":{"classes/TokenDTO.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"classes/TokenDTO.html":{},"coverage.html":{}}}],["toobject",{"_index":475,"title":{},"body":{"classes/ServiceBase.html":{}}}],["total",{"_index":414,"title":{},"body":{"classes/ResponseDTO.html":{},"injectables/ResponseHelper.html":{}}}],["touch",{"_index":591,"title":{},"body":{"index.html":{}}}],["try",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["twitter",{"_index":597,"title":{},"body":{"index.html":{}}}],["type",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"classes/BaseDTO.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryDTO.html":{},"injectables/CategoryService.html":{},"classes/ControllerBase.html":{},"interfaces/IDataFilter.html":{},"classes/Media.html":{},"injectables/MediaService.html":{},"classes/Post.html":{},"controllers/PostController.html":{},"classes/PostDTO.html":{},"injectables/PostService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/QueryDTO.html":{},"classes/ResponseDTO.html":{},"classes/ServiceBase.html":{},"classes/TokenDTO.html":{},"classes/User.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":610,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typescript",{"_index":553,"title":{},"body":{"index.html":{}}}],["unit",{"_index":568,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/MediaService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/ProfileService.html":{},"classes/ServiceBase.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":609,"title":{},"body":{"properties.html":{}}}],["update",{"_index":223,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/PostController.html":{}}}],["update(@req",{"_index":258,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/PostController.html":{}}}],["update(request",{"_index":239,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/PostController.html":{}}}],["updatebyid",{"_index":275,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/MediaService.html":{},"injectables/PostService.html":{},"injectables/ProfileService.html":{},"classes/ServiceBase.html":{},"injectables/UserService.html":{}}}],["updatebyid(id",{"_index":296,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/MediaService.html":{},"injectables/PostService.html":{},"injectables/ProfileService.html":{},"classes/ServiceBase.html":{},"injectables/UserService.html":{}}}],["updatedmodel",{"_index":472,"title":{},"body":{"classes/ServiceBase.html":{}}}],["updatedmodel.save",{"_index":474,"title":{},"body":{"classes/ServiceBase.html":{}}}],["url",{"_index":322,"title":{},"body":{"classes/Media.html":{},"injectables/MediaService.html":{}}}],["user",{"_index":55,"title":{"classes/User.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/PostController.html":{},"classes/User.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user.activate",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.email",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.id",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/PostController.html":{}}}],["user.name",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["user.password",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["usercred",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["usercred.email",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["usercred.password",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["userdocument",{"_index":489,"title":{},"body":{"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["userid",{"_index":280,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/MediaService.html":{},"injectables/PostService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/ServiceBase.html":{},"injectables/UserService.html":{}}}],["userschema",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"classes/User.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":39,"title":{"injectables/UserService.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/User.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["v",{"_index":451,"title":{},"body":{"classes/ServiceBase.html":{}}}],["v.tostring(16",{"_index":455,"title":{},"body":{"classes/ServiceBase.html":{}}}],["value",{"_index":317,"title":{},"body":{"interfaces/IDataFilter.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":508,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":617,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":607,"title":{},"body":{"properties.html":{}}}],["void",{"_index":294,"title":{},"body":{"injectables/CategoryService.html":{},"classes/ControllerBase.html":{},"injectables/MediaService.html":{},"injectables/PostService.html":{},"injectables/ProfileService.html":{},"classes/ServiceBase.html":{},"injectables/UserService.html":{}}}],["watch",{"_index":563,"title":{},"body":{"index.html":{}}}],["website",{"_index":595,"title":{},"body":{"index.html":{}}}],["world",{"_index":88,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":452,"title":{},"body":{"classes/ServiceBase.html":{}}}],["xxxx",{"_index":441,"title":{},"body":{"classes/ServiceBase.html":{}}}],["xxxxxxxx",{"_index":440,"title":{},"body":{"classes/ServiceBase.html":{}}}],["xxxxxxxxxxxx'.replace",{"_index":444,"title":{},"body":{"classes/ServiceBase.html":{}}}],["xy]/g",{"_index":445,"title":{},"body":{"classes/ServiceBase.html":{}}}],["yes",{"_index":424,"title":{},"body":{"injectables/ResponseHelper.html":{}}}],["you'd",{"_index":584,"title":{},"body":{"index.html":{}}}],["yxxx",{"_index":443,"title":{},"body":{"classes/ServiceBase.html":{}}}],["zoom",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAppService\n\nAppService\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthHelper\n\nAuthHelper\n\nAppModule -->\n\nAuthHelper->AppModule\n\n\n\n\n\nCategoryService\n\nCategoryService\n\nAppModule -->\n\nCategoryService->AppModule\n\n\n\n\n\nPostService\n\nPostService\n\nAppModule -->\n\nPostService->AppModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nAppModule -->\n\nProfileService->AppModule\n\n\n\n\n\nResponseHelper\n\nResponseHelper\n\nAppModule -->\n\nResponseHelper->AppModule\n\n\n\n\n\nUserService\n\nUserService\n\nAppModule -->\n\nUserService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            AuthHelper\n                        \n                        \n                            CategoryService\n                        \n                        \n                            PostService\n                        \n                        \n                            ProfileService\n                        \n                        \n                            ResponseHelper\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategoryController\n                        \n                        \n                            PostController\n                        \n                        \n                            AppController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CategoryController } from './controllers/category.controller';\nimport { PostController } from './controllers/post.controller';\nimport {\n  Profile,\n  ProfileSchema,\n  ProfileService,\n} from './services/profile.service';\nimport {\n  Category,\n  CategorySchema,\n  CategoryService,\n} from './services/category.service';\nimport { User, UserSchema, UserService } from './services/user.service';\nimport { Post, PostSchema, PostService } from './services/post.service';\nimport { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { AuthHelper } from './helpers/auth.helper';\nimport { ResponseHelper } from './helpers/response.helper';\nimport { JwtModule } from '@nestjs/jwt';\n\n@Module({\n  imports: [\n    JwtModule.register({\n      secret: 'secretKey',\n      signOptions: { expiresIn: '12h' },\n    }),\n    MongooseModule.forRoot('mongodb://localhost:27017/test'),\n    MongooseModule.forFeature([\n      { name: User.name, schema: UserSchema },\n      { name: Post.name, schema: PostSchema },\n      { name: Category.name, schema: CategorySchema },\n      { name: Profile.name, schema: ProfileSchema },\n    ]),\n  ],\n  controllers: [CategoryController, PostController, AppController],\n  providers: [\n    CategoryService,\n    AuthHelper,\n    ResponseHelper,\n    ProfileService,\n    UserService,\n    PostService,\n    AppService,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controllers/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                currentUser\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        currentUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    currentUser(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('currentUser')\n                \n            \n\n            \n                \n                    Defined in src/controllers/auth.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n            \n                \n                    Defined in src/controllers/auth.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signup')\n                \n            \n\n            \n                \n                    Defined in src/controllers/auth.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { TokenDTO } from './../common/dtos/common/TokenDTO';\nimport { JwtService } from '@nestjs/jwt';\n/*\nhttps://docs.nestjs.com/controllers#controllers\n*/\n\nimport { Controller, Get, HttpStatus, Post, Req } from '@nestjs/common';\nimport { Request } from 'express';\nimport { User, UserService } from '../services/user.service';\nimport { AuthHelper } from '../helpers/auth.helper';\nimport { ResponseDTO } from '../common/dtos/common/ResponseDTO';\nimport { ResponseHelper } from '../helpers/response.helper';\nimport { ProfileService } from '../services/profile.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    private userService: UserService,\n    private jwtService: JwtService,\n    private authHelper: AuthHelper,\n    private responseHelper: ResponseHelper,\n    private profileService: ProfileService,\n  ) {}\n\n  @Post('login')\n  async signIn(@Req() request: Request) {\n    try {\n      const userCred = request.body;\n      if (userCred) {\n        const _user = await this.userService.getUserByEmailPassword(\n          userCred.email,\n          userCred.password,\n        );\n        const access_token = this.jwtService.sign({\n          id: _user.id,\n          email: _user.email,\n        });\n        return this.responseHelper.response(access_token);\n      }\n    } catch (error) {\n      return this.responseHelper.response(\n        null,\n        0,\n        HttpStatus.BAD_REQUEST,\n        error,\n      );\n    }\n  }\n\n  @Get('currentUser')\n  async currentUser(@Req() request: Request) {\n    try {\n      const currentUser = this.authHelper.extractToken(\n        request.headers.authorization,\n      );\n      if (currentUser) {\n        const user = await this.userService.findById(currentUser.id);\n        return this.responseHelper.response({\n          id: user.id,\n          email: user.email,\n        });\n      }\n    } catch (error) {\n      return this.responseHelper.response(\n        null,\n        0,\n        HttpStatus.BAD_REQUEST,\n        error,\n      );\n    }\n  }\n\n  @Post('signup')\n  async signUp(@Req() request: Request) {\n    try {\n      const userCred: User = request.body;\n      const user = new User();\n      if (userCred) {\n        user.activate = false;\n        user.email = userCred.email;\n        user.password = userCred.password;\n        const _user = await this.userService.create(user, '');\n        if (_user) {\n          return this.responseHelper.response(_user.id);\n        }\n      }\n    } catch (error) {\n      return this.responseHelper.response(\n        null,\n        0,\n        HttpStatus.BAD_REQUEST,\n        error,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthHelper.html":{"url":"injectables/AuthHelper.html","title":"injectable - AuthHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/auth.helper.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                extractToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/helpers/auth.helper.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        extractToken\n                        \n                    \n                \n            \n            \n                \nextractToken(authorization: string)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/auth.helper.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authorization\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         TokenDTO\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { TokenDTO } from './../common/dtos/common/TokenDTO';\nimport { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\n\n@Injectable()\nexport class AuthHelper {\n  constructor(private jwtService: JwtService) {}\n  extractToken(authorization: string): TokenDTO {\n    if (authorization) {\n      const authorizationArr = authorization.split(' ');\n      if (authorizationArr && authorizationArr.length === 2) {\n        const [type, token] = authorizationArr;\n        if (type === 'Bearer') {\n          const decriptedToken = this.jwtService.verify(token);\n          return decriptedToken;\n        }\n      }\n    }\n    return null;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseDTO.html":{"url":"classes/BaseDTO.html","title":"class - BaseDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/common/BaseDTO.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                code\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                metadata\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/common/BaseDTO.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/common/BaseDTO.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        metadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/common/BaseDTO.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop } from '@nestjs/mongoose';\n\nexport class BaseDTO {\n  @Prop()\n  id: string;\n  @Prop()\n  code?: string;\n  @Prop({ type: Object })\n  metadata?: {\n    createdTime?: Date;\n    modifiedTime?: Date;\n    createdBy?: string;\n    modifiedBy?: string;\n    active?: number;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Category.html":{"url":"classes/Category.html","title":"class - Category","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/category.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseDTO\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                name\n                            \n                            \n                                parentCategoryId\n                            \n                            \n                                    Optional\n                                code\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                metadata\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/category.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/category.service.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parentCategoryId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/category.service.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseDTO\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseDTO:7\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseDTO\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseDTO:5\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        metadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseDTO\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseDTO:9\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ServiceBase } from '../common/abstracts/ServiceBase';\nimport { BaseDTO } from '../common/dtos/common/BaseDTO';\nimport { InjectModel, Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument, Model } from 'mongoose';\nimport { Injectable } from '@nestjs/common';\n\n@Schema()\nexport class Category extends BaseDTO {\n  @Prop()\n  name: string;\n  @Prop()\n  description: string;\n  @Prop()\n  parentCategoryId: string;\n}\nexport type CategoryDocument = HydratedDocument;\n\nexport const CategorySchema = SchemaFactory.createForClass(Category);\n\n@Injectable()\nexport class CategoryService extends ServiceBase {\n  constructor(\n    @InjectModel(Category.name) private _model: Model,\n  ) {\n    super(_model);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategoryController.html":{"url":"controllers/CategoryController.html","title":"controller - CategoryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategoryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controllers/category.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                category\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                list\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(request: Request, model: CategoryDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create')\n                \n            \n\n            \n                \n                    Defined in src/controllers/category.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    model\n                                    \n                                                CategoryDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('delete/:id')\n                \n            \n\n            \n                \n                    Defined in src/controllers/category.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/controllers/category.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        list\n                        \n                    \n                \n            \n            \n                \n                    \n                    list(request: Request, query: QueryDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('list')\n                \n            \n\n            \n                \n                    Defined in src/controllers/category.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                QueryDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(request: Request, model: CategoryDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('update')\n                \n            \n\n            \n                \n                    Defined in src/controllers/category.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    model\n                                    \n                                                CategoryDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, Query, Req } from '@nestjs/common';\nimport { CategoryDTO } from '../common/dtos/cms/categoryDTO';\nimport { QueryDTO } from '../common/dtos/common/QueryDTO';\nimport { AuthHelper } from '../helpers/auth.helper';\nimport { ResponseHelper } from '../helpers/response.helper';\nimport { CategoryService } from '../services/category.service';\nimport { Request } from 'express';\n\n@Controller('category')\nexport class CategoryController {\n  constructor(\n    private authHelper: AuthHelper,\n    private categoryService: CategoryService,\n    private responseHelper: ResponseHelper,\n  ) {}\n  @Get('list')\n  async list(@Req() request: Request, @Query() query: QueryDTO) {\n    const result = await this.categoryService.findAll(query);\n    return this.responseHelper.response(result.data, result.count);\n  }\n  @Get(':id')\n  async getById(@Req() request: Request) {\n    const id = request.params.id;\n    const result = await this.categoryService.findById(id);\n    return this.responseHelper.response(result);\n  }\n  @Post('create')\n  async create(@Req() request: Request, @Body() model: CategoryDTO) {\n    const user = this.authHelper.extractToken(request.headers.authorization);\n\n    const result = await this.categoryService.create(model, user.id);\n    return this.responseHelper.response(result);\n  }\n  @Post('update')\n  async update(@Req() request: Request, @Body() model: CategoryDTO) {\n    const user = this.authHelper.extractToken(request.headers.authorization);\n\n    const result = await this.categoryService.updateById(\n      model.id,\n      model,\n      user.id,\n    );\n    return this.responseHelper.response(result);\n  }\n  @Get('delete/:id')\n  async delete(@Req() request: Request) {\n    const id = request.params.id;\n    const user = this.authHelper.extractToken(request.headers.authorization);\n\n    const result = await this.categoryService.deleteById(id, user.id);\n    return this.responseHelper.response(result);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CategoryDTO.html":{"url":"classes/CategoryDTO.html","title":"class - CategoryDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CategoryDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/cms/categoryDTO.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseDTO\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                name\n                            \n                            \n                                parentCategoryId\n                            \n                            \n                                    Optional\n                                code\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                metadata\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/cms/categoryDTO.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/cms/categoryDTO.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parentCategoryId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/cms/categoryDTO.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseDTO\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseDTO:7\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseDTO\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseDTO:5\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        metadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseDTO\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseDTO:9\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BaseDTO } from '../common/BaseDTO';\n\nexport class CategoryDTO extends BaseDTO {\n  name: string;\n  description: string;\n  parentCategoryId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoryService.html":{"url":"injectables/CategoryService.html","title":"injectable - CategoryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CategoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/category.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ServiceBase\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteById\n                            \n                            \n                                find\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findById\n                            \n                            \n                                findOne\n                            \n                            \n                                getCount\n                            \n                            \n                                newGuid\n                            \n                            \n                                    Async\n                                updateById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_model: Model)\n                    \n                \n                        \n                            \n                                Defined in src/services/category.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _model\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(model: DTO, userId: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:38\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                            DTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteById(id, userId)\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:73\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        find\n                        \n                    \n                \n            \n            \n                \nfind(filter: DTO | any)\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:32\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                            DTO | any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(query: QueryDTO)\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:20\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                QueryDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById(id: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:35\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(filter: DTO | any)\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:17\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                            DTO | any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCount\n                        \n                    \n                \n            \n            \n                \ngetCount()\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:31\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        newGuid\n                        \n                    \n                \n            \n            \n                \nnewGuid()\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:7\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateById\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateById(id, model: DTO | any, userId: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:48\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    model\n                                    \n                                            DTO | any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ServiceBase } from '../common/abstracts/ServiceBase';\nimport { BaseDTO } from '../common/dtos/common/BaseDTO';\nimport { InjectModel, Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument, Model } from 'mongoose';\nimport { Injectable } from '@nestjs/common';\n\n@Schema()\nexport class Category extends BaseDTO {\n  @Prop()\n  name: string;\n  @Prop()\n  description: string;\n  @Prop()\n  parentCategoryId: string;\n}\nexport type CategoryDocument = HydratedDocument;\n\nexport const CategorySchema = SchemaFactory.createForClass(Category);\n\n@Injectable()\nexport class CategoryService extends ServiceBase {\n  constructor(\n    @InjectModel(Category.name) private _model: Model,\n  ) {\n    super(_model);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ControllerBase.html":{"url":"classes/ControllerBase.html","title":"class - ControllerBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ControllerBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/abstracts/ControllerBase.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(service: ServiceBase)\n                    \n                \n                        \n                            \n                                Defined in src/common/abstracts/ControllerBase.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                        ServiceBase\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate()\n                \n            \n\n\n            \n                \n                    Defined in src/common/abstracts/ControllerBase.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { BaseDTO } from '../dtos/common/BaseDTO';\nimport { ServiceBase } from './ServiceBase';\n\nexport class ControllerBase {\n  constructor(private service: ServiceBase) {}\n  create() {\n    this.service;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDataFilter.html":{"url":"interfaces/IDataFilter.html","title":"interface - IDataFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDataFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/types/IDataFilter.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            condition\n                                        \n                                \n                                \n                                        \n                                            fields\n                                        \n                                \n                                \n                                        \n                                            limit\n                                        \n                                \n                                \n                                        \n                                            skip\n                                        \n                                \n                                \n                                        \n                                            sorts\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        condition\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        condition:     \"and\" | \"or\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"and\" | \"or\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fields\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fields:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        limit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        limit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        skip\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        skip:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sorts\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sorts:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IDataFilter {\n  fields: { fieldName: string; operator: string; value: string }[];\n  sorts: { fieldName: string; order: number }[];\n  limit: number;\n  skip: number;\n  condition: 'and' | 'or';\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Media.html":{"url":"classes/Media.html","title":"class - Media","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Media\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/media.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseDTO\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                key\n                            \n                            \n                                type\n                            \n                            \n                                url\n                            \n                            \n                                    Optional\n                                code\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                metadata\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/media.service.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/media.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/media.service.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseDTO\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseDTO:7\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseDTO\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseDTO:5\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        metadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseDTO\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseDTO:9\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ServiceBase } from '../common/abstracts/ServiceBase';\nimport { BaseDTO } from '../common/dtos/common/BaseDTO';\nimport { InjectModel, Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument, Model } from 'mongoose';\nimport { Injectable } from '@nestjs/common';\n\n@Schema()\nexport class Media extends BaseDTO {\n  @Prop()\n  key: string;\n  @Prop()\n  type: string;\n  @Prop()\n  url: string;\n}\nexport type MediaDocument = HydratedDocument;\n\nexport const MediaSchema = SchemaFactory.createForClass(Media);\n\n@Injectable()\nexport class MediaService extends ServiceBase {\n  constructor(@InjectModel(Media.name) private _model: Model) {\n    super(_model);\n  }\n  getByKey(key: string) {\n    return this._model\n      .findOne({\n        key: key,\n      })\n      .exec();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MediaService.html":{"url":"injectables/MediaService.html","title":"injectable - MediaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MediaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/media.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ServiceBase\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getByKey\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteById\n                            \n                            \n                                find\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findById\n                            \n                            \n                                findOne\n                            \n                            \n                                getCount\n                            \n                            \n                                newGuid\n                            \n                            \n                                    Async\n                                updateById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_model: Model)\n                    \n                \n                        \n                            \n                                Defined in src/services/media.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _model\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getByKey\n                        \n                    \n                \n            \n            \n                \ngetByKey(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/media.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(model: DTO, userId: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:38\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                            DTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteById(id, userId)\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:73\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        find\n                        \n                    \n                \n            \n            \n                \nfind(filter: DTO | any)\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:32\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                            DTO | any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(query: QueryDTO)\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:20\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                QueryDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById(id: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:35\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(filter: DTO | any)\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:17\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                            DTO | any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCount\n                        \n                    \n                \n            \n            \n                \ngetCount()\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:31\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        newGuid\n                        \n                    \n                \n            \n            \n                \nnewGuid()\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:7\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateById\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateById(id, model: DTO | any, userId: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:48\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    model\n                                    \n                                            DTO | any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ServiceBase } from '../common/abstracts/ServiceBase';\nimport { BaseDTO } from '../common/dtos/common/BaseDTO';\nimport { InjectModel, Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument, Model } from 'mongoose';\nimport { Injectable } from '@nestjs/common';\n\n@Schema()\nexport class Media extends BaseDTO {\n  @Prop()\n  key: string;\n  @Prop()\n  type: string;\n  @Prop()\n  url: string;\n}\nexport type MediaDocument = HydratedDocument;\n\nexport const MediaSchema = SchemaFactory.createForClass(Media);\n\n@Injectable()\nexport class MediaService extends ServiceBase {\n  constructor(@InjectModel(Media.name) private _model: Model) {\n    super(_model);\n  }\n  getByKey(key: string) {\n    return this._model\n      .findOne({\n        key: key,\n      })\n      .exec();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Post.html":{"url":"classes/Post.html","title":"class - Post","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/post.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseDTO\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorId\n                            \n                            \n                                categoryId\n                            \n                            \n                                content\n                            \n                            \n                                title\n                            \n                            \n                                    Optional\n                                code\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                metadata\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/post.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        categoryId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/post.service.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/post.service.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/post.service.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseDTO\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseDTO:7\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseDTO\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseDTO:5\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        metadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseDTO\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseDTO:9\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ServiceBase } from '../common/abstracts/ServiceBase';\nimport { BaseDTO } from '../common/dtos/common/BaseDTO';\nimport { InjectModel, Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument, Model } from 'mongoose';\nimport { Injectable } from '@nestjs/common';\nimport { QueryDTO } from '../common/dtos/common/QueryDTO';\n\n@Schema()\nexport class Post extends BaseDTO {\n  @Prop()\n  authorId: string;\n  @Prop()\n  categoryId: string;\n  @Prop()\n  title: string;\n  @Prop()\n  content: string;\n}\nexport type PostDocument = HydratedDocument;\n\nexport const PostSchema = SchemaFactory.createForClass(Post);\n\n@Injectable()\nexport class PostService extends ServiceBase {\n  constructor(@InjectModel(Post.name) private _model: Model) {\n    super(_model);\n  }\n  async getByCategoryId(id: string, query: QueryDTO) {\n    return {\n      data: await this._model\n        .find({ categoryId: id })\n        .limit(Number(query.limit))\n        .skip(Number(query.limit))\n        .sort(query.orderBy)\n        .exec(),\n      count: await this._model.find({ categoryId: id }).count().exec(),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostController.html":{"url":"controllers/PostController.html","title":"controller - PostController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controllers/post.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                post\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                list\n                            \n                            \n                                    Async\n                                listByCategoryId\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(request: Request, model: PostDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create')\n                \n            \n\n            \n                \n                    Defined in src/controllers/post.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    model\n                                    \n                                                PostDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('delete/:id')\n                \n            \n\n            \n                \n                    Defined in src/controllers/post.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/controllers/post.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        list\n                        \n                    \n                \n            \n            \n                \n                    \n                    list(request: Request, query: QueryDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('list')\n                \n            \n\n            \n                \n                    Defined in src/controllers/post.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                QueryDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listByCategoryId\n                        \n                    \n                \n            \n            \n                \n                    \n                    listByCategoryId(request: Request, query: QueryDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('list/:categoryId')\n                \n            \n\n            \n                \n                    Defined in src/controllers/post.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                QueryDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(request: Request, model: PostDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('update')\n                \n            \n\n            \n                \n                    Defined in src/controllers/post.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    model\n                                    \n                                                PostDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        /*\nhttps://docs.nestjs.com/controllers#controllers\n*/\n\nimport { Body, Controller, Get, Post, Query, Req } from '@nestjs/common';\nimport { PostDTO } from '../common/dtos/cms/postDTO';\nimport { QueryDTO } from 'src/common/dtos/common/QueryDTO';\nimport { PostService } from '../services/post.service';\nimport { Request, response } from 'express';\nimport { AuthHelper } from '../helpers/auth.helper';\nimport { ResponseHelper } from '../helpers/response.helper';\n\n@Controller('post')\nexport class PostController {\n  constructor(\n    private authHelper: AuthHelper,\n    private postService: PostService,\n    private responseHelper: ResponseHelper,\n  ) {}\n  @Get('list')\n  async list(@Req() request: Request, @Query() query: QueryDTO) {\n    const result = await this.postService.findAll(query);\n    return this.responseHelper.response(result.data, result.count);\n  }\n  @Get(':id')\n  async getById(@Req() request: Request) {\n    const id = request.params.id;\n    const result = await this.postService.findById(id);\n    return this.responseHelper.response(result);\n  }\n  @Get('list/:categoryId')\n  async listByCategoryId(@Req() request: Request, @Query() query: QueryDTO) {\n    const categoryId = request.params.categoryId;\n    const result = await this.postService.getByCategoryId(categoryId, query);\n    return this.responseHelper.response(result.data, result.count);\n  }\n  @Post('create')\n  async create(@Req() request: Request, @Body() model: PostDTO) {\n    const user = this.authHelper.extractToken(request.headers.authorization);\n\n    const result = await this.postService.create(model, user.id);\n    return this.responseHelper.response(result);\n  }\n  @Post('update')\n  async update(@Req() request: Request, @Body() model: PostDTO) {\n    const user = this.authHelper.extractToken(request.headers.authorization);\n\n    const result = await this.postService.updateById(model.id, model, user.id);\n    return this.responseHelper.response(result);\n  }\n  @Get('delete/:id')\n  async delete(@Req() request: Request) {\n    const id = request.params.id;\n    const user = this.authHelper.extractToken(request.headers.authorization);\n\n    const result = await this.postService.deleteById(id, user.id);\n    return this.responseHelper.response(result);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostDTO.html":{"url":"classes/PostDTO.html","title":"class - PostDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/cms/postDTO.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseDTO\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorId\n                            \n                            \n                                categoryId\n                            \n                            \n                                content\n                            \n                            \n                                title\n                            \n                            \n                                    Optional\n                                code\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                metadata\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/cms/postDTO.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        categoryId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/cms/postDTO.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/cms/postDTO.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/cms/postDTO.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseDTO\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseDTO:7\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseDTO\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseDTO:5\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        metadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseDTO\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseDTO:9\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BaseDTO } from '../common/BaseDTO';\n\nexport class PostDTO extends BaseDTO {\n  authorId: string;\n  categoryId: string;\n  title: string;\n  content: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostService.html":{"url":"injectables/PostService.html","title":"injectable - PostService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/post.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ServiceBase\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getByCategoryId\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteById\n                            \n                            \n                                find\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findById\n                            \n                            \n                                findOne\n                            \n                            \n                                getCount\n                            \n                            \n                                newGuid\n                            \n                            \n                                    Async\n                                updateById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_model: Model)\n                    \n                \n                        \n                            \n                                Defined in src/services/post.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _model\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByCategoryId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByCategoryId(id: string, query: QueryDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/services/post.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                QueryDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(model: DTO, userId: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:38\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                            DTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteById(id, userId)\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:73\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        find\n                        \n                    \n                \n            \n            \n                \nfind(filter: DTO | any)\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:32\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                            DTO | any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(query: QueryDTO)\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:20\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                QueryDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById(id: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:35\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(filter: DTO | any)\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:17\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                            DTO | any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCount\n                        \n                    \n                \n            \n            \n                \ngetCount()\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:31\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        newGuid\n                        \n                    \n                \n            \n            \n                \nnewGuid()\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:7\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateById\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateById(id, model: DTO | any, userId: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:48\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    model\n                                    \n                                            DTO | any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ServiceBase } from '../common/abstracts/ServiceBase';\nimport { BaseDTO } from '../common/dtos/common/BaseDTO';\nimport { InjectModel, Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument, Model } from 'mongoose';\nimport { Injectable } from '@nestjs/common';\nimport { QueryDTO } from '../common/dtos/common/QueryDTO';\n\n@Schema()\nexport class Post extends BaseDTO {\n  @Prop()\n  authorId: string;\n  @Prop()\n  categoryId: string;\n  @Prop()\n  title: string;\n  @Prop()\n  content: string;\n}\nexport type PostDocument = HydratedDocument;\n\nexport const PostSchema = SchemaFactory.createForClass(Post);\n\n@Injectable()\nexport class PostService extends ServiceBase {\n  constructor(@InjectModel(Post.name) private _model: Model) {\n    super(_model);\n  }\n  async getByCategoryId(id: string, query: QueryDTO) {\n    return {\n      data: await this._model\n        .find({ categoryId: id })\n        .limit(Number(query.limit))\n        .skip(Number(query.limit))\n        .sort(query.orderBy)\n        .exec(),\n      count: await this._model.find({ categoryId: id }).count().exec(),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Profile.html":{"url":"classes/Profile.html","title":"class - Profile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Profile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/profile.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseDTO\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                bio\n                            \n                            \n                                birhdate\n                            \n                            \n                                fullname\n                            \n                            \n                                profilPicture\n                            \n                            \n                                userId\n                            \n                            \n                                    Optional\n                                code\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                metadata\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/profile.service.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        birhdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/profile.service.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fullname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/profile.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profilPicture\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/profile.service.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/profile.service.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseDTO\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseDTO:7\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseDTO\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseDTO:5\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        metadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseDTO\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseDTO:9\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ServiceBase } from '../common/abstracts/ServiceBase';\nimport { BaseDTO } from '../common/dtos/common/BaseDTO';\nimport { InjectModel, Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument, Model } from 'mongoose';\nimport { Injectable } from '@nestjs/common';\n\n@Schema()\nexport class Profile extends BaseDTO {\n  @Prop()\n  userId: string;\n  @Prop()\n  fullname: string;\n  @Prop()\n  profilPicture: string;\n  @Prop()\n  birhdate: string;\n  @Prop()\n  bio: string;\n}\nexport type ProfileDocument = HydratedDocument;\n\nexport const ProfileSchema = SchemaFactory.createForClass(Profile);\n\n@Injectable()\nexport class ProfileService extends ServiceBase {\n  constructor(\n    @InjectModel(Profile.name) private _model: Model,\n  ) {\n    super(_model);\n  }\n  getByUserId(id: string) {\n    return this._model.findOne({ id: id }).exec();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProfileService.html":{"url":"injectables/ProfileService.html","title":"injectable - ProfileService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProfileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/profile.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ServiceBase\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getByUserId\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteById\n                            \n                            \n                                find\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findById\n                            \n                            \n                                findOne\n                            \n                            \n                                getCount\n                            \n                            \n                                newGuid\n                            \n                            \n                                    Async\n                                updateById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_model: Model)\n                    \n                \n                        \n                            \n                                Defined in src/services/profile.service.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _model\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getByUserId\n                        \n                    \n                \n            \n            \n                \ngetByUserId(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/profile.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(model: DTO, userId: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:38\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                            DTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteById(id, userId)\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:73\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        find\n                        \n                    \n                \n            \n            \n                \nfind(filter: DTO | any)\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:32\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                            DTO | any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(query: QueryDTO)\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:20\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                QueryDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById(id: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:35\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(filter: DTO | any)\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:17\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                            DTO | any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCount\n                        \n                    \n                \n            \n            \n                \ngetCount()\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:31\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        newGuid\n                        \n                    \n                \n            \n            \n                \nnewGuid()\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:7\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateById\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateById(id, model: DTO | any, userId: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:48\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    model\n                                    \n                                            DTO | any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ServiceBase } from '../common/abstracts/ServiceBase';\nimport { BaseDTO } from '../common/dtos/common/BaseDTO';\nimport { InjectModel, Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument, Model } from 'mongoose';\nimport { Injectable } from '@nestjs/common';\n\n@Schema()\nexport class Profile extends BaseDTO {\n  @Prop()\n  userId: string;\n  @Prop()\n  fullname: string;\n  @Prop()\n  profilPicture: string;\n  @Prop()\n  birhdate: string;\n  @Prop()\n  bio: string;\n}\nexport type ProfileDocument = HydratedDocument;\n\nexport const ProfileSchema = SchemaFactory.createForClass(Profile);\n\n@Injectable()\nexport class ProfileService extends ServiceBase {\n  constructor(\n    @InjectModel(Profile.name) private _model: Model,\n  ) {\n    super(_model);\n  }\n  getByUserId(id: string) {\n    return this._model.findOne({ id: id }).exec();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueryDTO.html":{"url":"classes/QueryDTO.html","title":"class - QueryDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueryDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/common/QueryDTO.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                limit\n                            \n                            \n                                orderBy\n                            \n                            \n                                skip\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/common/QueryDTO.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/common/QueryDTO.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        skip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/common/QueryDTO.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class QueryDTO {\n  limit: string;\n  skip: string;\n  orderBy: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResponseDTO.html":{"url":"classes/ResponseDTO.html","title":"class - ResponseDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResponseDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/common/ResponseDTO.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                code\n                            \n                            \n                                    Optional\n                                data\n                            \n                            \n                                    Optional\n                                error\n                            \n                            \n                                    Optional\n                                status\n                            \n                            \n                                    Optional\n                                timestap\n                            \n                            \n                                    Optional\n                                total\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/common/ResponseDTO.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any | any[]\n\n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/common/ResponseDTO.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any | any[]\n\n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/common/ResponseDTO.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/common/ResponseDTO.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        timestap\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/common/ResponseDTO.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        total\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/common/ResponseDTO.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ResponseDTO {\n  data?: any | any[];\n  total?: number;\n  status?: string;\n  error?: any | any[];\n  code?: number;\n  timestap?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResponseHelper.html":{"url":"injectables/ResponseHelper.html","title":"injectable - ResponseHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResponseHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/response.helper.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                response\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        response\n                        \n                    \n                \n            \n            \n                \nresponse(data?, total?, status?, error?)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/response.helper.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    total\n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    status\n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    error\n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ResponseDTO\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ResponseDTO } from './../common/dtos/common/ResponseDTO';\nimport { HttpStatus, Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class ResponseHelper {\n  response(data?, total?, status?, error?) {\n    return {\n      data: data,\n      total: total,\n      error: error,\n      status: status ? status : HttpStatus.ACCEPTED,\n      timestap: new Date().getTime(),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ServiceBase.html":{"url":"classes/ServiceBase.html","title":"class - ServiceBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ServiceBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/abstracts/ServiceBase.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteById\n                            \n                            \n                                find\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findById\n                            \n                            \n                                findOne\n                            \n                            \n                                getCount\n                            \n                            \n                                newGuid\n                            \n                            \n                                    Async\n                                updateById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: Model)\n                    \n                \n                        \n                            \n                                Defined in src/common/abstracts/ServiceBase.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(model: DTO, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/abstracts/ServiceBase.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                            DTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteById(id, userId)\n                \n            \n\n\n            \n                \n                    Defined in src/common/abstracts/ServiceBase.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        find\n                        \n                    \n                \n            \n            \n                \nfind(filter: DTO | any)\n                \n            \n\n\n            \n                \n                    Defined in src/common/abstracts/ServiceBase.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                            DTO | any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(query: QueryDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/common/abstracts/ServiceBase.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                QueryDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/abstracts/ServiceBase.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(filter: DTO | any)\n                \n            \n\n\n            \n                \n                    Defined in src/common/abstracts/ServiceBase.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                            DTO | any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCount\n                        \n                    \n                \n            \n            \n                \ngetCount()\n                \n            \n\n\n            \n                \n                    Defined in src/common/abstracts/ServiceBase.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        newGuid\n                        \n                    \n                \n            \n            \n                \nnewGuid()\n                \n            \n\n\n            \n                \n                    Defined in src/common/abstracts/ServiceBase.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateById\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateById(id, model: DTO | any, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/abstracts/ServiceBase.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    model\n                                    \n                                            DTO | any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Model } from 'mongoose';\nimport { BaseDTO } from '../dtos/common/BaseDTO';\nimport { QueryDTO } from '../dtos/common/QueryDTO';\n\nexport class ServiceBase {\n  constructor(private model: Model) {}\n  newGuid() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(\n      /[xy]/g,\n      function (c) {\n        const r = (Math.random() * 16) | 0,\n          v = c == 'x' ? r : (r & 0x3) | 0x8;\n        return v.toString(16);\n      },\n    );\n  }\n  findOne(filter: DTO | any) {\n    return this.model.findOne(filter).exec();\n  }\n  async findAll(query: QueryDTO) {\n    return {\n      data: await this.model\n        .find()\n        .limit(Number(query.limit))\n        .skip(Number(query.skip))\n        .sort(query.orderBy)\n        .exec(),\n      count: await this.model.count().exec(),\n    };\n  }\n  getCount() {}\n  find(filter: DTO | any) {\n    return this.model.find(filter).exec();\n  }\n  findById(id: string) {\n    return this.model.findOne({ id: id }).exec();\n  }\n  async create(model: DTO, userId: string) {\n    model.id = this.newGuid();\n    model.metadata = {\n      createdBy: userId,\n      createdTime: new Date(),\n      active: 1,\n    };\n    const createdModel = new this.model(model);\n    return (await createdModel.save()).id;\n  }\n  async updateById(id, model: DTO | any, userId: string) {\n    const _model = await this.model\n      .findOne({\n        id: id,\n      })\n      .exec();\n    if (_model) {\n      _model.metadata.modifiedBy = userId;\n      _model.metadata.modifiedTime = new Date();\n      model.metadata = _model.metadata;\n      model.id = _model.id;\n      const updatedModel = await this.model.findOneAndUpdate(\n        { id: model.id },\n        model,\n      );\n      await updatedModel.save();\n      return await this.model\n        .findOne({\n          id: id,\n        })\n        .exec();\n    } else {\n      return null;\n    }\n  }\n  async deleteById(id, userId) {\n    const _model = (\n      await this.model\n        .findOne({\n          id: id,\n        })\n        .exec()\n    ).toObject();\n    if (_model) {\n      _model.metadata.modifiedBy = userId;\n      _model.metadata.modifiedTime = new Date();\n      _model.metadata.active = 2;\n      const deletedModel = await this.model.findOneAndUpdate(\n        { id: id },\n        _model,\n      );\n      return (await deletedModel.save()).id;\n    } else {\n      return null;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenDTO.html":{"url":"classes/TokenDTO.html","title":"class - TokenDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/common/TokenDTO.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/common/TokenDTO.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/common/TokenDTO.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class TokenDTO {\n  id: string;\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/user.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseDTO\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                activate\n                            \n                            \n                                email\n                            \n                            \n                                password\n                            \n                            \n                                    Optional\n                                code\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                metadata\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        activate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/user.service.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/user.service.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/user.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseDTO\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseDTO:7\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseDTO\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseDTO:5\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        metadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseDTO\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseDTO:9\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ServiceBase } from '../common/abstracts/ServiceBase';\nimport { BaseDTO } from '../common/dtos/common/BaseDTO';\nimport { InjectModel, Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument, Model } from 'mongoose';\nimport { Injectable } from '@nestjs/common';\n\n@Schema()\nexport class User extends BaseDTO {\n  @Prop()\n  email: string;\n  @Prop()\n  password: string;\n  @Prop()\n  activate: boolean;\n}\nexport type UserDocument = HydratedDocument;\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n@Injectable()\nexport class UserService extends ServiceBase {\n  constructor(@InjectModel(User.name) private _model: Model) {\n    super(_model);\n  }\n  getUserByEmailPassword(email, password) {\n    return this._model.findOne({ email: email, password: password }).exec();\n  }\n\n  getUsers() {\n    return this._model.find().exec();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/user.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ServiceBase\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getUserByEmailPassword\n                            \n                            \n                                getUsers\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteById\n                            \n                            \n                                find\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findById\n                            \n                            \n                                findOne\n                            \n                            \n                                getCount\n                            \n                            \n                                newGuid\n                            \n                            \n                                    Async\n                                updateById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_model: Model)\n                    \n                \n                        \n                            \n                                Defined in src/services/user.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _model\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getUserByEmailPassword\n                        \n                    \n                \n            \n            \n                \ngetUserByEmailPassword(email, password)\n                \n            \n\n\n            \n                \n                    Defined in src/services/user.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUsers\n                        \n                    \n                \n            \n            \n                \ngetUsers()\n                \n            \n\n\n            \n                \n                    Defined in src/services/user.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(model: DTO, userId: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:38\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                            DTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteById(id, userId)\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:73\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        find\n                        \n                    \n                \n            \n            \n                \nfind(filter: DTO | any)\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:32\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                            DTO | any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(query: QueryDTO)\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:20\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                QueryDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById(id: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:35\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(filter: DTO | any)\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:17\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                            DTO | any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCount\n                        \n                    \n                \n            \n            \n                \ngetCount()\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:31\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        newGuid\n                        \n                    \n                \n            \n            \n                \nnewGuid()\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:7\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateById\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateById(id, model: DTO | any, userId: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ServiceBase\n\n                \n            \n            \n                \n                        Defined in         ServiceBase:48\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    model\n                                    \n                                            DTO | any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ServiceBase } from '../common/abstracts/ServiceBase';\nimport { BaseDTO } from '../common/dtos/common/BaseDTO';\nimport { InjectModel, Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument, Model } from 'mongoose';\nimport { Injectable } from '@nestjs/common';\n\n@Schema()\nexport class User extends BaseDTO {\n  @Prop()\n  email: string;\n  @Prop()\n  password: string;\n  @Prop()\n  activate: boolean;\n}\nexport type UserDocument = HydratedDocument;\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n@Injectable()\nexport class UserService extends ServiceBase {\n  constructor(@InjectModel(User.name) private _model: Model) {\n    super(_model);\n  }\n  getUserByEmailPassword(email, password) {\n    return this._model.findOne({ email: email, password: password }).exec();\n  }\n\n  getUsers() {\n    return this._model.find().exec();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/abstracts/ControllerBase.ts\n            \n            class\n            ControllerBase\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/abstracts/ServiceBase.ts\n            \n            class\n            ServiceBase\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/common/const/http-status.const.ts\n            \n            variable\n            HTTP_STATUS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/dtos/cms/categoryDTO.ts\n            \n            class\n            CategoryDTO\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/common/dtos/cms/postDTO.ts\n            \n            class\n            PostDTO\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/common/dtos/common/BaseDTO.ts\n            \n            class\n            BaseDTO\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/dtos/common/QueryDTO.ts\n            \n            class\n            QueryDTO\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/dtos/common/ResponseDTO.ts\n            \n            class\n            ResponseDTO\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/common/dtos/common/TokenDTO.ts\n            \n            class\n            TokenDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/types/IDataFilter.ts\n            \n            interface\n            IDataFilter\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/controllers/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/controllers/category.controller.ts\n            \n            controller\n            CategoryController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/controllers/post.controller.ts\n            \n            controller\n            PostController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/helpers/auth.helper.ts\n            \n            injectable\n            AuthHelper\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/helpers/response.helper.ts\n            \n            injectable\n            ResponseHelper\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/services/category.service.ts\n            \n            class\n            Category\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/services/category.service.ts\n            \n            injectable\n            CategoryService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/services/category.service.ts\n            \n            variable\n            CategorySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/services/media.service.ts\n            \n            class\n            Media\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/services/media.service.ts\n            \n            injectable\n            MediaService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/services/media.service.ts\n            \n            variable\n            MediaSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/services/post.service.ts\n            \n            class\n            Post\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/services/post.service.ts\n            \n            injectable\n            PostService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/services/post.service.ts\n            \n            variable\n            PostSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/services/profile.service.ts\n            \n            class\n            Profile\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/services/profile.service.ts\n            \n            injectable\n            ProfileService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/services/profile.service.ts\n            \n            variable\n            ProfileSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/services/user.service.ts\n            \n            class\n            User\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/services/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/services/user.service.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^10.0.1\n        \n            @nestjs/mongoose : ^9.2.1\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            mongoose : ^6.8.3\n        \n            passport-jwt : ^4.0.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAppService\n\nAppService\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthHelper\n\nAuthHelper\n\nAppModule -->\n\nAuthHelper->AppModule\n\n\n\n\n\nCategoryService\n\nCategoryService\n\nAppModule -->\n\nCategoryService->AppModule\n\n\n\n\n\nPostService\n\nPostService\n\nAppModule -->\n\nPostService->AppModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nAppModule -->\n\nProfileService->AppModule\n\n\n\n\n\nResponseHelper\n\nResponseHelper\n\nAppModule -->\n\nResponseHelper->AppModule\n\n\n\n\n\nUserService\n\nUserService\n\nAppModule -->\n\nUserService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    13 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CategoryDocument   (src/.../category.service.ts)\n                        \n                        \n                            MediaDocument   (src/.../media.service.ts)\n                        \n                        \n                            PostDocument   (src/.../post.service.ts)\n                        \n                        \n                            ProfileDocument   (src/.../profile.service.ts)\n                        \n                        \n                            UserDocument   (src/.../user.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/services/category.service.ts\n    \n    \n        \n            \n                \n                    \n                    CategoryDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/services/media.service.ts\n    \n    \n        \n            \n                \n                    \n                    MediaDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/services/post.service.ts\n    \n    \n        \n            \n                \n                    \n                    PostDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/services/profile.service.ts\n    \n    \n        \n            \n                \n                    \n                    ProfileDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/services/user.service.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CategorySchema   (src/.../category.service.ts)\n                        \n                        \n                            HTTP_STATUS   (src/.../http-status.const.ts)\n                        \n                        \n                            MediaSchema   (src/.../media.service.ts)\n                        \n                        \n                            PostSchema   (src/.../post.service.ts)\n                        \n                        \n                            ProfileSchema   (src/.../profile.service.ts)\n                        \n                        \n                            UserSchema   (src/.../user.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/services/category.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CategorySchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Category)\n                    \n                \n\n\n        \n    \n\n    src/common/const/http-status.const.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        HTTP_STATUS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  BAD_REQUEST: 404,\n  SUCCESS: 200,\n}\n                    \n                \n\n\n        \n    \n\n    src/services/media.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MediaSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Media)\n                    \n                \n\n\n        \n    \n\n    src/services/post.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PostSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Post)\n                    \n                \n\n\n        \n    \n\n    src/services/profile.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ProfileSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Profile)\n                    \n                \n\n\n        \n    \n\n    src/services/user.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
